version: '3.8'

services:
  # Master Orchestrator Service
  orchestrator:
    build:
      context: ../../..
      dockerfile: ai_testing/deployment/docker/Dockerfile.orchestrator
    image: novel-engine/ai-testing-orchestrator:latest
    container_name: ai-testing-orchestrator
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - SERVICES_BASE_PORT=8000
      - HEALTH_CHECK_INTERVAL=30
    volumes:
      - ../config:/app/config:ro
      - ai-testing-logs:/app/logs
    depends_on:
      - browser-automation
      - api-testing
      - ai-quality
      - results-aggregation
      - notification
    networks:
      - ai-testing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Browser Automation Service
  browser-automation:
    build:
      context: ../../..
      dockerfile: ai_testing/deployment/docker/Dockerfile.services
      target: browser-automation
    image: novel-engine/ai-testing-browser-automation:latest
    container_name: ai-testing-browser-automation
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - PLAYWRIGHT_BROWSERS_PATH=/app/.cache/ms-playwright
    volumes:
      - ../config:/app/config:ro
      - ai-testing-logs:/app/logs
      - playwright-cache:/app/.cache/ms-playwright
    networks:
      - ai-testing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Browser automation needs more resources
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # API Testing Service
  api-testing:
    build:
      context: ../../..
      dockerfile: ai_testing/deployment/docker/Dockerfile.services
      target: api-testing
    image: novel-engine/ai-testing-api-testing:latest
    container_name: ai-testing-api-testing
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
    volumes:
      - ../config:/app/config:ro
      - ai-testing-logs:/app/logs
    networks:
      - ai-testing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # AI Quality Assessment Service
  ai-quality:
    build:
      context: ../../..
      dockerfile: ai_testing/deployment/docker/Dockerfile.services
      target: ai-quality
    image: novel-engine/ai-testing-ai-quality:latest
    container_name: ai-testing-ai-quality
    ports:
      - "8003:8003"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    volumes:
      - ../config:/app/config:ro
      - ai-testing-logs:/app/logs
    networks:
      - ai-testing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Results Aggregation Service
  results-aggregation:
    build:
      context: ../../..
      dockerfile: ai_testing/deployment/docker/Dockerfile.services
      target: results-aggregation
    image: novel-engine/ai-testing-results-aggregation:latest
    container_name: ai-testing-results-aggregation
    ports:
      - "8004:8004"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
    volumes:
      - ../config:/app/config:ro
      - ai-testing-logs:/app/logs
      - ai-testing-data:/app/data
    networks:
      - ai-testing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Notification Service
  notification:
    build:
      context: ../../..
      dockerfile: ai_testing/deployment/docker/Dockerfile.services
      target: notification
    image: novel-engine/ai-testing-notification:latest
    container_name: ai-testing-notification
    ports:
      - "8005:8005"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
    volumes:
      - ../config:/app/config:ro
      - ai-testing-logs:/app/logs
    networks:
      - ai-testing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for caching and session management (optional)
  redis:
    image: redis:7-alpine
    container_name: ai-testing-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ai-testing-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-testing-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - ai-testing-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-testing-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - ai-testing-network
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-piechart-panel

# Networks
networks:
  ai-testing-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  ai-testing-logs:
    driver: local
  ai-testing-data:
    driver: local
  playwright-cache:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local