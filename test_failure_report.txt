============================= test session starts =============================
collecting ... collected 907 items / 13 errors

=================================== ERRORS ====================================
_ ERROR collecting tests/integration/interactions/test_system_comprehensive.py _
C:\Users\k7407\AppData\Roaming\Python\Python313\site-packages\_pytest\python.py:498: in importtestmodule
    mod = import_path(
C:\Users\k7407\AppData\Roaming\Python\Python313\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\ProgramData\miniconda3\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
C:\Users\k7407\AppData\Roaming\Python\Python313\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\k7407\AppData\Roaming\Python\Python313\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\ProgramData\miniconda3\Lib\ast.py:50: in parse
    return compile(source, filename, mode, flags,
E     File "D:\Code\Novel-Engine\tests\integration\interactions\test_system_comprehensive.py", line 140
E       )\n            \n            # Process interaction\n            outcome = await interaction_engine.process_interaction(context)\n            \n            # Validate outcome\n            assert outcome is not None\n            \n            if hasattr(outcome, 'success'):\n                assert outcome.success == True\n                assert outcome.interaction_id == \"test_dialogue_001\"\n                assert len(outcome.context.participants) == 2\n                logger.info(f\"✅ Dialogue processing completed in {getattr(outcome, 'processing_duration', 0):.2f}s\")\n            else:\n                # Handle mock response\n                assert outcome.get(\"success\", True)\n                logger.info(\"✅ Dialogue processing completed (mock)\")\n            \n        except Exception as e:\n            logger.error(f\"❌ Dialogue interaction test failed: {e}\")\n            assert False, f\"Dialogue interaction failed: {e}\"\n    \n    @pytest.mark.asyncio\n  
E         ^
E   SyntaxError: unexpected character after line continuation character
_______ ERROR collecting tests/security/test_comprehensive_security.py ________
ImportError while importing test module 'D:\Code\Novel-Engine\tests\security\test_comprehensive_security.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\ProgramData\miniconda3\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\security\test_comprehensive_security.py:33: in <module>
    from src.security.auth_system import AuthenticationManager, UserRole, Permission
src\security\__init__.py:33: in <module>
    from .enterprise_security_manager import (
src\security\enterprise_security_manager.py:28: in <module>
    import aioredis
E   ModuleNotFoundError: No module named 'aioredis'
_________ ERROR collecting tests/test_api_endpoints_comprehensive.py __________
ImportError while importing test module 'D:\Code\Novel-Engine\tests\test_api_endpoints_comprehensive.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\ProgramData\miniconda3\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_api_endpoints_comprehensive.py:25: in <module>
    from api_server import app
api_server.py:25: in <module>
    from src.persona_agent import _validate_gemini_api_key, _make_gemini_api_request
E   ImportError: cannot import name '_validate_gemini_api_key' from 'src.persona_agent' (D:\Code\Novel-Engine\src\persona_agent.py)
_________________ ERROR collecting tests/test_data_models.py __________________
ImportError while importing test module 'D:\Code\Novel-Engine\tests\test_data_models.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\ProgramData\miniconda3\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_data_models.py:38: in <module>
    from src.core.types import (
E   ImportError: cannot import name 'is_valid_agent_id' from 'src.core.types' (D:\Code\Novel-Engine\src\core\types\__init__.py)
_______________ ERROR collecting tests/test_enhanced_bridge.py ________________
ImportError while importing test module 'D:\Code\Novel-Engine\tests\test_enhanced_bridge.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\ProgramData\miniconda3\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_enhanced_bridge.py:18: in <module>
    from enhanced_multi_agent_bridge_refactored import (
E   ModuleNotFoundError: No module named 'enhanced_multi_agent_bridge_refactored'
________________ ERROR collecting tests/test_error_handler.py _________________

    #!/usr/bin/env python3
    """
    CentralizedErrorHandler Test Suite
    ==================================
    
    Comprehensive unit tests for the centralized error handling system.
    Tests error classification, recovery strategies, and monitoring.
    """
    
    import pytest
    import asyncio
    from datetime import datetime, timedelta
    from unittest.mock import Mock, AsyncMock, patch
    
    import sys
>   sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
                           ^^^^
E   NameError: name 'Path' is not defined

tests\test_error_handler.py:16: NameError
__________ ERROR collecting tests/test_integration_comprehensive.py ___________
ImportError while importing test module 'D:\Code\Novel-Engine\tests\test_integration_comprehensive.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\ProgramData\miniconda3\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_integration_comprehensive.py:32: in <module>
    from api_server import app
api_server.py:25: in <module>
    from src.persona_agent import _validate_gemini_api_key, _make_gemini_api_request
E   ImportError: cannot import name '_validate_gemini_api_key' from 'src.persona_agent' (D:\Code\Novel-Engine\src\persona_agent.py)
_______________ ERROR collecting tests/test_llm_integration.py ________________
ImportError while importing test module 'D:\Code\Novel-Engine\tests\test_llm_integration.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\ProgramData\miniconda3\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_llm_integration.py:11: in <module>
    from src.persona_agent import PersonaAgent, ThreatLevel
E   ImportError: cannot import name 'ThreatLevel' from 'src.persona_agent' (D:\Code\Novel-Engine\src\persona_agent.py)
________________ ERROR collecting tests/test_persona_agent.py _________________
ImportError while importing test module 'D:\Code\Novel-Engine\tests\test_persona_agent.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\ProgramData\miniconda3\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_persona_agent.py:5: in <module>
    from src.persona_agent import PersonaAgent, WorldEvent, SubjectiveInterpretation, ThreatLevel
E   ImportError: cannot import name 'WorldEvent' from 'src.persona_agent' (D:\Code\Novel-Engine\src\persona_agent.py)
_________________ ERROR collecting tests/test_persona_core.py _________________
ImportError while importing test module 'D:\Code\Novel-Engine\tests\test_persona_core.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\ProgramData\miniconda3\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_persona_core.py:20: in <module>
    from agents.persona_memory import PersonaMemory
E   ModuleNotFoundError: No module named 'agents.persona_memory'
______________ ERROR collecting tests/test_security_framework.py ______________
ImportError while importing test module 'D:\Code\Novel-Engine\tests\test_security_framework.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\ProgramData\miniconda3\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_security_framework.py:32: in <module>
    from src.security.input_validation import (
src\security\__init__.py:33: in <module>
    from .enterprise_security_manager import (
src\security\enterprise_security_manager.py:28: in <module>
    import aioredis
E   ModuleNotFoundError: No module named 'aioredis'
_________________ ERROR collecting tests/test_user_stories.py _________________
ImportError while importing test module 'D:\Code\Novel-Engine\tests\test_user_stories.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\ProgramData\miniconda3\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_user_stories.py:33: in <module>
    from src.api.main_api_server import create_app
src\api\main_api_server.py:33: in <module>
    from src.api.subjective_reality_api import create_subjective_reality_api
src\api\subjective_reality_api.py:18: in <module>
    from src.security.auth_system import get_current_user, require_permission, Permission
E   ImportError: cannot import name 'get_current_user' from 'src.security.auth_system' (D:\Code\Novel-Engine\src\security\auth_system.py)
_ ERROR collecting tests/unit/contexts/world/domain/test_world_state_aggregate.py _

    #!/usr/bin/env python3
    """
    Unit tests for WorldState Aggregate Root
    
    Comprehensive test suite for the WorldState aggregate root business logic,
    covering entity management, state transitions, spatial operations, and domain events.
    """
    
    import pytest
    from datetime import datetime, timedelta
    from typing import Dict, Any
    from unittest.mock import Mock, patch
    
    # Mock problematic dependencies
    from unittest.mock import MagicMock
    import sys
    
    # Mock the aioredis dependency to avoid import errors
    sys.modules['aioredis'] = MagicMock()
    
    # Mock the event_bus module to avoid aioredis dependency
    event_bus_mock = MagicMock()
    event_mock = MagicMock()
    event_mock.return_value = Mock()
    event_bus_mock.Event = event_mock
    sys.modules['src.events.event_bus'] = event_bus_mock
    
    # Now import the actual modules we're testing
>   from contexts.world.domain.aggregates.world_state import (
        WorldState, WorldEntity, WorldStatus, EntityType
    )

tests\unit\contexts\world\domain\test_world_state_aggregate.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    #!/usr/bin/env python3
    """
    WorldState Aggregate Root
    
    This module contains the WorldState aggregate root, which serves as the consistency
    boundary for all world-related operations. It encapsulates business logic and
    ensures invariants are maintained across the entire world state.
    """
    
    import uuid
    from dataclasses import dataclass, field
    from datetime import datetime
    from typing import Any, Dict, List, Optional, Set, Tuple, Union
    from enum import Enum
    
    from ..entities.entity import Entity
    from ..value_objects.coordinates import Coordinates
>   from ..events.world_events import WorldStateChanged, WorldChangeType, WorldEventSeverity

contexts\world\domain\aggregates\world_state.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    #!/usr/bin/env python3
    """
    World Domain Events
    
    This module contains domain events related to world state changes.
    These events follow the enterprise event bus patterns established in the codebase
    and represent significant business events in the World context.
    """
    
    from dataclasses import dataclass, field
    from datetime import datetime
    from enum import Enum
    from typing import Any, Dict, Optional, Set
    from uuid import uuid4
    
    from src.events.event_bus import Event, EventPriority
    
    
    class WorldChangeType(Enum):
        """Types of world state changes."""
        ENTITY_ADDED = "entity_added"
        ENTITY_REMOVED = "entity_removed"
        ENTITY_MOVED = "entity_moved"
        ENTITY_UPDATED = "entity_updated"
        STATE_SNAPSHOT = "state_snapshot"
        STATE_RESET = "state_reset"
        ENVIRONMENT_CHANGED = "environment_changed"
        TIME_ADVANCED = "time_advanced"
    
    
    class WorldEventSeverity(Enum):
        """Severity levels for world events."""
        MINOR = "minor"         # Small changes, entity updates
        MODERATE = "moderate"   # Entity additions/removals
        MAJOR = "major"         # Environment changes, time advances
        CRITICAL = "critical"   # State resets, system-wide changes
    
    
>   @dataclass
     ^^^^^^^^^

contexts\world\domain\events\world_events.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <MagicMock spec='str' id='1844456251680'>

    def dataclass(cls=None, /, *, init=True, repr=True, eq=True, order=False,
                  unsafe_hash=False, frozen=False, match_args=True,
                  kw_only=False, slots=False, weakref_slot=False):
        """Add dunder methods based on the fields defined in the class.
    
        Examines PEP 526 __annotations__ to determine fields.
    
        If init is true, an __init__() method is added to the class. If repr
        is true, a __repr__() method is added. If order is true, rich
        comparison dunder methods are added. If unsafe_hash is true, a
        __hash__() method is added. If frozen is true, fields may not be
        assigned to after instance creation. If match_args is true, the
        __match_args__ tuple is added. If kw_only is true, then by default
        all fields are keyword-only. If slots is true, a new class with a
        __slots__ attribute is returned.
        """
    
        def wrap(cls):
            return _process_class(cls, init, repr, eq, order, unsafe_hash,
                                  frozen, match_args, kw_only, slots,
                                  weakref_slot)
    
        # See if we're being called as @dataclass or @dataclass().
        if cls is None:
            # We're called with parens.
            return wrap
    
        # We're called as @dataclass without parens.
>       return wrap(cls)
               ^^^^^^^^^

C:\ProgramData\miniconda3\Lib\dataclasses.py:1305: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <MagicMock spec='str' id='1844456251680'>

    def wrap(cls):
>       return _process_class(cls, init, repr, eq, order, unsafe_hash,
                              frozen, match_args, kw_only, slots,
                              weakref_slot)

C:\ProgramData\miniconda3\Lib\dataclasses.py:1295: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <MagicMock spec='str' id='1844456251680'>, init = True, repr = True
eq = True, order = False, unsafe_hash = False, frozen = False, match_args = True
kw_only = False, slots = False, weakref_slot = False

    def _process_class(cls, init, repr, eq, order, unsafe_hash, frozen,
                       match_args, kw_only, slots, weakref_slot):
        # Now that dicts retain insertion order, there's no reason to use
        # an ordered dict.  I am leveraging that ordering here, because
        # derived class fields overwrite base class fields, but the order
        # is defined by the base class, which is found first.
        fields = {}
    
        if cls.__module__ in sys.modules:
            globals = sys.modules[cls.__module__].__dict__
        else:
            # Theoretically this can happen if someone writes
            # a custom string to cls.__module__.  In which case
            # such dataclass won't be fully introspectable
            # (w.r.t. typing.get_type_hints) but will still function
            # correctly.
            globals = {}
    
        setattr(cls, _PARAMS, _DataclassParams(init, repr, eq, order,
                                               unsafe_hash, frozen,
                                               match_args, kw_only,
                                               slots, weakref_slot))
    
        # Find our base classes in reverse MRO order, and exclude
        # ourselves.  In reversed order so that more derived classes
        # override earlier field definitions in base classes.  As long as
        # we're iterating over them, see if all or any of them are frozen.
        any_frozen_base = False
        # By default `all_frozen_bases` is `None` to represent a case,
        # where some dataclasses does not have any bases with `_FIELDS`
        all_frozen_bases = None
        has_dataclass_bases = False
>       for b in cls.__mro__[-1:0:-1]:
                 ^^^^^^^^^^^

C:\ProgramData\miniconda3\Lib\dataclasses.py:961: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <MagicMock spec='str' id='1844456251680'>, name = '__mro__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
>               raise AttributeError("Mock object has no attribute %r" % name)
E               AttributeError: Mock object has no attribute '__mro__'. Did you mean: '__mod__'?

C:\ProgramData\miniconda3\Lib\unittest\mock.py:690: AttributeError
============================== warnings summary ===============================
tests\test_character_system_comprehensive.py:629
  D:\Code\Novel-Engine\tests\test_character_system_comprehensive.py:629: PytestUnknownMarkWarning: Unknown pytest.mark.character - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    pytest.mark.character,

tests\test_story_generation_comprehensive.py:817
  D:\Code\Novel-Engine\tests\test_story_generation_comprehensive.py:817: PytestUnknownMarkWarning: Unknown pytest.mark.story - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    pytest.mark.story,

tests\test_story_generation_comprehensive.py:818
  D:\Code\Novel-Engine\tests\test_story_generation_comprehensive.py:818: PytestUnknownMarkWarning: Unknown pytest.mark.narrative - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    pytest.mark.narrative,

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR tests/integration/interactions/test_system_comprehensive.py
ERROR tests/security/test_comprehensive_security.py
ERROR tests/test_api_endpoints_comprehensive.py
ERROR tests/test_data_models.py
ERROR tests/test_enhanced_bridge.py
ERROR tests/test_error_handler.py - NameError: name 'Path' is not defined
ERROR tests/test_integration_comprehensive.py
ERROR tests/test_llm_integration.py
ERROR tests/test_persona_agent.py
ERROR tests/test_persona_core.py
ERROR tests/test_security_framework.py
ERROR tests/test_user_stories.py
ERROR tests/unit/contexts/world/domain/test_world_state_aggregate.py - Attrib...
!!!!!!!!!!!!!!!!!! Interrupted: 13 errors during collection !!!!!!!!!!!!!!!!!!!
======================= 3 warnings, 13 errors in 4.18s ========================
