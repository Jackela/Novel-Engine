name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

permissions:
  contents: read

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # Quick health check
  health-check:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run smoke tests
      shell: bash
      run: |
        python -c "import sys; sys.path.append('.'); from src.core.system_orchestrator import SystemOrchestrator; print('✅ Core imports working')"
        python -m pytest tests/test_foundation.py -v
      env:
        PYTHONPATH: ${{ github.workspace }}

  # Deploy to staging environment
  deploy-staging:
    runs-on: ubuntu-22.04
    needs: health-check
    if: success() || inputs.force_deploy
    
    environment:
      name: staging
      url: https://novel-engine-staging.your-domain.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Build frontend
      shell: bash
      run: |
        cd frontend
        npm ci
        npm run build

    - name: Run staging deployment
      shell: bash
      run: |
        python deploy/staging/deploy.py
      env:
        STAGING_ENV: true
        PYTHONPATH: ${{ github.workspace }}

    - name: Health check staging deployment
      shell: bash
      run: |
        sleep 30  # Wait for deployment
        curl -f http://localhost:8000/health || exit 1
        echo "✅ Staging deployment healthy"

    - name: Run staging smoke tests
      shell: bash
      run: |
        cd frontend
        npm ci
        npx playwright install --with-deps
        STAGING=true npx playwright test tests/smoke.spec.js || true

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Staging deployment successful"
        else
          echo "❌ Staging deployment failed"
        fi
