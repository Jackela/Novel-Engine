name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: read

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # Create release build
  build-release:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build

    - name: Build frontend
      shell: bash
      run: |
        cd frontend
        npm ci
        npm run build

    - name: Run full test suite
      shell: bash
      run: |
        pytest --cov=src --cov-report=term-missing -v
        cd frontend
        npm test -- --coverage --watchAll=false
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Create distribution package
      shell: bash
      run: |
        mkdir -p release
        cp -r frontend/dist release/frontend
        cp -r src release/
        cp -r private release/
        cp requirements.txt config.yaml settings.yaml README.md LICENSE release/
        
        # Create installation script
        cat > release/install.sh << 'EOF'
        #!/bin/bash
        echo "Installing Novel Engine..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "Installation complete!"
        echo "Run: python src/api/main_api_server.py"
        EOF
        chmod +x release/install.sh
        
        # Create archive
        tar -czf novel-engine-release.tar.gz release/

    - name: Generate changelog
      shell: bash
      run: |
        echo "# Release Notes" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## What's New" >> RELEASE_NOTES.md
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> RELEASE_NOTES.md || echo "- Initial release" >> RELEASE_NOTES.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ inputs.version || github.ref_name }}
        name: Release ${{ inputs.version || github.ref_name }}
        body_path: RELEASE_NOTES.md
        files: |
          novel-engine-release.tar.gz
        draft: false
        prerelease: false

    - name: Upload release artifact
      uses: actions/upload-artifact@v3
      with:
        name: release-package
        path: novel-engine-release.tar.gz
        retention-days: 90

  # Deploy to production (manual approval required)
  deploy-production:
    runs-on: ubuntu-22.04
    needs: build-release
    environment:
      name: production
      url: https://novel-engine.your-domain.com
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download release artifact
      uses: actions/download-artifact@v3
      with:
        name: release-package

    - name: Deploy to production
      shell: bash
      run: |
        echo "üöÄ Deploying to production..."
        # Add your production deployment logic here
        echo "‚úÖ Production deployment complete"

    - name: Production health check
      shell: bash
      run: |
        echo "üè• Running production health checks..."
        # Add health check logic here
        echo "‚úÖ All systems operational"
