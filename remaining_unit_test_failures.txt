============================= test session starts =============================
collecting ... collected 446 items

tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestSubjectiveApplicationServiceInitialization::test_initialization_with_all_dependencies PASSED [  0%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestSubjectiveApplicationServiceInitialization::test_initialization_with_minimal_dependencies PASSED [  0%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestSubjectiveApplicationServiceInitialization::test_command_handler_registry_initialization PASSED [  0%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestTurnBriefOperations::test_create_turn_brief_for_entity_success PASSED [  0%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestTurnBriefOperations::test_create_turn_brief_with_minimal_parameters PASSED [  1%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestTurnBriefOperations::test_create_turn_brief_command_handler_exception PASSED [  1%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestTurnBriefOperations::test_get_turn_brief_by_entity_id_found PASSED [  1%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestTurnBriefOperations::test_get_turn_brief_by_entity_id_not_found PASSED [  1%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestTurnBriefOperations::test_delete_turn_brief_success PASSED [  2%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestTurnBriefOperations::test_delete_turn_brief_not_found PASSED [  2%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestTurnBriefOperations::test_delete_turn_brief_repository_failure PASSED [  2%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestPerceptionOperations::test_update_perception_capabilities_success PASSED [  2%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestPerceptionOperations::test_update_perception_capabilities_entity_not_found PASSED [  2%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestPerceptionOperations::test_add_perception_success PASSED [  3%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestPerceptionOperations::test_add_perception_minimal_parameters PASSED [  3%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestPerceptionOperations::test_add_perception_entity_not_found PASSED [  3%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestPerceptionOperations::test_add_perception_invalid_command PASSED [  3%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestAwarenessOperations::test_update_awareness_state_success FAILED [  4%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestFogOfWarOperations::test_update_fog_of_war_success PASSED [  4%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestErrorHandling::test_repository_exception_propagation PASSED [  4%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestErrorHandling::test_command_handler_exception_propagation PASSED [  4%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestErrorHandling::test_invalid_parameter_handling PASSED [  4%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestIntegrationScenarios::test_entity_lifecycle_scenario PASSED [  5%]
tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestIntegrationScenarios::test_error_recovery_scenario PASSED [  5%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestAwarenessStateCreation::test_minimal_awareness_state_creation PASSED [  5%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestAwarenessStateCreation::test_full_awareness_state_creation PASSED [  5%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestAwarenessStateCreation::test_awareness_modifiers_none_initialization PASSED [  6%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestAwarenessStateCreation::test_awareness_modifiers_list_conversion PASSED [  6%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestAwarenessStateValidation::test_invalid_awareness_modifier_type PASSED [  6%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestAwarenessStateValidation::test_invalid_modifier_value_type PASSED [  6%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestAwarenessStateValidation::test_modifier_value_out_of_range_positive PASSED [  6%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestAwarenessStateValidation::test_modifier_value_out_of_range_negative PASSED [  7%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestAwarenessStateValidation::test_fatigue_level_negative PASSED [  7%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestAwarenessStateValidation::test_fatigue_level_too_high PASSED [  7%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestAwarenessStateValidation::test_stress_level_negative PASSED [  7%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestAwarenessStateValidation::test_stress_level_too_high PASSED [  8%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestAwarenessStateValidation::test_target_specific_focus_requires_target PASSED [  8%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestAwarenessStateValidation::test_target_specific_focus_with_target_succeeds PASSED [  8%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestCalculateEffectiveAlertness::test_no_modifiers_returns_current_alertness PASSED [  8%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestCalculateEffectiveAlertness::test_fatigue_reduces_alertness PASSED [  8%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestCalculateEffectiveAlertness::test_stress_moderate_increases_alertness PASSED [  9%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestCalculateEffectiveAlertness::test_stress_extreme_decreases_alertness PASSED [  9%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestCalculateEffectiveAlertness::test_positive_modifiers_increase_alertness PASSED [  9%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestCalculateEffectiveAlertness::test_negative_modifiers_decrease_alertness PASSED [  9%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestCalculateEffectiveAlertness::test_fear_positive_increases_alertness PASSED [ 10%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestCalculateEffectiveAlertness::test_fear_negative_decreases_alertness PASSED [ 10%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestCalculateEffectiveAlertness::test_alertness_clamping_maximum PASSED [ 10%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestCalculateEffectiveAlertness::test_alertness_clamping_minimum PASSED [ 10%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestPerceptionBonus::test_unconscious_severe_penalty PASSED [ 10%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestPerceptionBonus::test_sleeping_heavy_penalty PASSED [ 11%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestPerceptionBonus::test_relaxed_neutral_bonus PASSED [ 11%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestPerceptionBonus::test_vigilant_high_bonus PASSED [ 11%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestPerceptionBonus::test_target_specific_focus_bonus PASSED [ 11%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestPerceptionBonus::test_task_focused_penalty FAILED [ 12%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestPerceptionBonus::test_environmental_focus_bonus PASSED [ 12%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestPerceptionBonus::test_combined_alertness_and_focus_bonus PASSED [ 12%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestReactionTimeModifier::test_unconscious_no_reaction FAILED [ 12%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestReactionTimeModifier::test_sleeping_very_slow_reaction FAILED [ 13%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestReactionTimeModifier::test_vigilant_fast_reaction FAILED [ 13%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestReactionTimeModifier::test_fatigue_penalty_on_reaction_time PASSED [ 13%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestReactionTimeModifier::test_optimal_stress_level_reaction PASSED [ 13%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestStealthDetection::test_unconscious_cannot_detect_stealth PASSED [ 13%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestStealthDetection::test_sleeping_cannot_detect_stealth PASSED [ 14%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestStealthDetection::test_threat_scanning_can_detect_stealth PASSED [ 14%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestStealthDetection::test_environmental_focus_can_detect_stealth PASSED [ 14%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestStealthDetection::test_high_alertness_can_detect_stealth PASSED [ 14%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestStealthDetection::test_low_alertness_cannot_detect_stealth_normally PASSED [ 15%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestCombatSurprise::test_unconscious_always_surprised PASSED [ 15%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestCombatSurprise::test_sleeping_always_surprised PASSED [ 15%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestCombatSurprise::test_task_focused_more_likely_surprised PASSED [ 15%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestCombatSurprise::test_only_drowsy_surprised_when_not_task_focused PASSED [ 15%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestCombatSurprise::test_high_alertness_not_surprised PASSED [ 16%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestImmutableOperations::test_with_modified_alertness_creates_new_instance PASSED [ 16%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestImmutableOperations::test_with_focus_change_creates_new_instance PASSED [ 16%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestImmutableOperations::test_with_added_modifier_creates_new_instance PASSED [ 16%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestImmutableOperations::test_with_added_modifier_overwrites_existing PASSED [ 17%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestComplexScenarios::test_exhausted_guard_scenario FAILED [ 17%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestComplexScenarios::test_enhanced_sentinel_scenario FAILED [ 17%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestComplexScenarios::test_terrified_civilian_scenario PASSED [ 17%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestComplexScenarios::test_focused_researcher_scenario PASSED [ 17%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestEdgeCases::test_all_modifier_types_combined PASSED [ 18%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestEdgeCases::test_boundary_modifier_values PASSED [ 18%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestEdgeCases::test_empty_string_focus_target FAILED [ 18%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestEdgeCases::test_very_long_focus_target PASSED [ 18%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestEquality::test_identical_states_are_equal PASSED [ 19%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestEquality::test_different_alertness_not_equal PASSED [ 19%]
tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestEquality::test_different_modifiers_not_equal PASSED [ 19%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemCreation::test_minimal_knowledge_item_creation PASSED [ 19%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemCreation::test_full_knowledge_item_creation PASSED [ 19%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemCreation::test_tags_none_initialization PASSED [ 20%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemCreation::test_tags_list_conversion PASSED [ 20%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemValidation::test_empty_subject_validation PASSED [ 20%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemValidation::test_whitespace_subject_validation PASSED [ 20%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemValidation::test_empty_information_validation PASSED [ 21%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemValidation::test_whitespace_information_validation PASSED [ 21%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemValidation::test_expiration_before_acquisition_validation PASSED [ 21%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemValidation::test_expiration_equal_to_acquisition_validation PASSED [ 21%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemBusinessLogic::test_is_current_no_expiration PASSED [ 21%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemBusinessLogic::test_is_current_before_expiration PASSED [ 22%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemBusinessLogic::test_is_current_after_expiration PASSED [ 22%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemBusinessLogic::test_is_current_default_time PASSED [ 22%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemBusinessLogic::test_get_reliability_score_absolute_direct PASSED [ 22%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemBusinessLogic::test_get_reliability_score_high_certainty_ally_report PASSED [ 23%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemBusinessLogic::test_get_reliability_score_low_certainty_enemy_report PASSED [ 23%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemBusinessLogic::test_get_reliability_score_unknown_certainty PASSED [ 23%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemBusinessLogic::test_has_tag_existing PASSED [ 23%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemBusinessLogic::test_has_tag_nonexistent PASSED [ 23%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemBusinessLogic::test_has_tag_empty_tags PASSED [ 24%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemImmutableOperations::test_with_updated_certainty_creates_new_instance PASSED [ 24%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeItemImmutableOperations::test_with_updated_certainty_and_source PASSED [ 24%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseCreation::test_empty_knowledge_base_creation PASSED [ 24%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseCreation::test_knowledge_base_with_items PASSED [ 25%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseValidation::test_invalid_knowledge_items_type PASSED [ 25%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseValidation::test_invalid_subject_items_type PASSED [ 25%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseValidation::test_invalid_knowledge_item_type PASSED [ 25%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseValidation::test_knowledge_item_subject_mismatch PASSED [ 26%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseQuerying::test_get_knowledge_about_existing_subject PASSED [ 26%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseQuerying::test_get_knowledge_about_nonexistent_subject PASSED [ 26%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseQuerying::test_get_knowledge_about_with_min_reliability PASSED [ 26%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseQuerying::test_get_knowledge_about_sorting PASSED [ 26%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseQuerying::test_get_most_reliable_knowledge_existing PASSED [ 27%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseQuerying::test_get_most_reliable_knowledge_nonexistent PASSED [ 27%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseQuerying::test_has_knowledge_about_with_sufficient_certainty FAILED [ 27%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseQuerying::test_has_knowledge_about_insufficient_certainty FAILED [ 27%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseQuerying::test_has_knowledge_about_nonexistent PASSED [ 28%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseFiltering::test_get_subjects_by_type PASSED [ 28%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseFiltering::test_get_subjects_by_tag PASSED [ 28%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseFiltering::test_get_knowledge_by_source PASSED [ 28%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseFiltering::test_get_stale_knowledge PASSED [ 28%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseImmutableOperations::test_add_knowledge_creates_new_instance PASSED [ 29%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseImmutableOperations::test_add_knowledge_to_existing_subject PASSED [ 29%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseImmutableOperations::test_update_knowledge PASSED [ 29%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseImmutableOperations::test_update_knowledge_subject_mismatch PASSED [ 29%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseStatistics::test_get_total_knowledge_count PASSED [ 30%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseStatistics::test_get_subjects_count PASSED [ 30%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseStatistics::test_empty_knowledge_base_statistics PASSED [ 30%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestComplexScenarios::test_intelligence_gathering_scenario PASSED [ 30%]
tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestComplexScenarios::test_information_expiry_scenario PASSED [ 30%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionRangeCreation::test_minimal_perception_range_creation PASSED [ 31%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionRangeCreation::test_full_perception_range_creation PASSED [ 31%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionRangeCreation::test_zero_ranges_allowed PASSED [ 31%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionRangeValidation::test_negative_base_range_validation PASSED [ 31%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionRangeValidation::test_negative_effective_range_validation PASSED [ 32%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionRangeValidation::test_accuracy_modifier_below_zero PASSED [ 32%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionRangeValidation::test_accuracy_modifier_above_one PASSED [ 32%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionRangeValidation::test_empty_environmental_modifier_name PASSED [ 32%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionRangeValidation::test_whitespace_environmental_modifier_name PASSED [ 32%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionRangeValidation::test_non_string_environmental_modifier_name PASSED [ 33%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionRangeValidation::test_non_numeric_environmental_modifier_value PASSED [ 33%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionRangeValidation::test_boundary_accuracy_modifier_values PASSED [ 33%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestVisibilityCalculation::test_visibility_at_zero_distance PASSED [ 33%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestVisibilityCalculation::test_visibility_beyond_effective_range PASSED [ 34%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestVisibilityCalculation::test_visibility_within_range_perfect_conditions FAILED [ 34%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestVisibilityCalculation::test_visibility_with_environmental_degradation PASSED [ 34%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestVisibilityCalculation::test_visibility_with_low_accuracy PASSED [ 34%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestVisibilityCalculation::test_visibility_level_thresholds PASSED [ 34%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionRangeUtilityMethods::test_is_within_range_true PASSED [ 35%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionRangeUtilityMethods::test_is_within_range_false PASSED [ 35%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionRangeUtilityMethods::test_apply_environmental_modifier_creates_new_instance PASSED [ 35%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionRangeUtilityMethods::test_apply_environmental_modifier_overwrites_existing PASSED [ 35%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionCapabilitiesCreation::test_minimal_perception_capabilities_creation PASSED [ 36%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionCapabilitiesCreation::test_full_perception_capabilities_creation PASSED [ 36%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionCapabilitiesValidation::test_empty_perception_ranges_validation PASSED [ 36%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionCapabilitiesValidation::test_invalid_perception_type_key PASSED [ 36%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionCapabilitiesValidation::test_invalid_perception_range_value PASSED [ 36%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionCapabilitiesValidation::test_perception_type_mismatch PASSED [ 37%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionCapabilitiesValidation::test_negative_passive_awareness_bonus PASSED [ 37%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionCapabilitiesValidation::test_zero_focused_perception_multiplier PASSED [ 37%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionCapabilitiesValidation::test_negative_focused_perception_multiplier PASSED [ 37%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionCapabilitiesBusinessLogic::test_get_best_visibility_no_focus PASSED [ 38%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionCapabilitiesBusinessLogic::test_get_best_visibility_with_focus PASSED [ 38%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionCapabilitiesBusinessLogic::test_get_best_visibility_beyond_all_ranges PASSED [ 38%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionCapabilitiesBusinessLogic::test_get_maximum_range PASSED [ 38%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionCapabilitiesBusinessLogic::test_get_maximum_range_empty_ranges FAILED [ 39%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionCapabilitiesBusinessLogic::test_has_perception_type PASSED [ 39%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionCapabilitiesBusinessLogic::test_get_perception_types PASSED [ 39%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestComplexPerceptionScenarios::test_stealth_detection_scenario PASSED [ 39%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestComplexPerceptionScenarios::test_environmental_adaptation_scenario PASSED [ 39%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestComplexPerceptionScenarios::test_focused_perception_effectiveness PASSED [ 40%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestComplexPerceptionScenarios::test_multi_sense_compensation_scenario PASSED [ 40%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestEdgeCasesAndBoundaryConditions::test_zero_effective_range_perception PASSED [ 40%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestEdgeCasesAndBoundaryConditions::test_zero_accuracy_perception PASSED [ 40%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestEdgeCasesAndBoundaryConditions::test_extreme_environmental_modifiers PASSED [ 41%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestEdgeCasesAndBoundaryConditions::test_very_large_distances PASSED [ 41%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestEdgeCasesAndBoundaryConditions::test_negative_distances PASSED [ 41%]
tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestEdgeCasesAndBoundaryConditions::test_focused_perception_on_nonexistent_type PASSED [ 41%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdCreation::test_create_with_uuid PASSED [ 41%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdCreation::test_create_with_specific_uuid PASSED [ 42%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdCreation::test_frozen_dataclass_immutability PASSED [ 42%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdValidation::test_invalid_uuid_type_string PASSED [ 42%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdValidation::test_invalid_uuid_type_integer PASSED [ 42%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdValidation::test_invalid_uuid_type_none PASSED [ 43%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdValidation::test_invalid_uuid_type_dict PASSED [ 43%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdValidation::test_invalid_uuid_type_list PASSED [ 43%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdFactoryMethods::test_generate_creates_unique_ids PASSED [ 43%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdFactoryMethods::test_from_string_valid_uuid PASSED [ 43%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdFactoryMethods::test_from_string_uppercase_uuid PASSED [ 44%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdFactoryMethods::test_from_string_without_dashes PASSED [ 44%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdFactoryMethods::test_from_string_invalid_format FAILED [ 44%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdFactoryMethods::test_from_string_none PASSED [ 44%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdFactoryMethods::test_from_string_non_string_type FAILED [ 45%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdStringRepresentation::test_str_representation PASSED [ 45%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdStringRepresentation::test_str_representation_generated PASSED [ 45%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdStringRepresentation::test_repr_not_implemented PASSED [ 45%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdEquality::test_equality_same_uuid PASSED [ 45%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdEquality::test_equality_different_uuids PASSED [ 46%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdEquality::test_equality_with_non_subjective_id PASSED [ 46%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdEquality::test_equality_reflexive PASSED [ 46%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdEquality::test_equality_symmetric PASSED [ 46%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdEquality::test_equality_transitive PASSED [ 47%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdHashing::test_hash_consistency PASSED [ 47%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdHashing::test_hash_equality_implies_same_hash PASSED [ 47%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdHashing::test_hash_different_for_different_uuids PASSED [ 47%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdHashing::test_usable_as_dict_key PASSED [ 47%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdHashing::test_usable_in_set PASSED [ 48%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdRoundTripConversion::test_generate_to_string_to_from_string PASSED [ 48%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdRoundTripConversion::test_from_string_to_string_consistency PASSED [ 48%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdRoundTripConversion::test_uuid_to_subjective_id_to_string PASSED [ 48%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdRoundTripConversion::test_multiple_round_trips PASSED [ 49%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdEdgeCases::test_nil_uuid PASSED [ 49%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdEdgeCases::test_max_uuid PASSED [ 49%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdEdgeCases::test_uuid_versions PASSED [ 49%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdEdgeCases::test_case_insensitive_from_string PASSED [ 50%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdEdgeCases::test_compact_uuid_string PASSED [ 50%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdEdgeCases::test_memory_efficiency PASSED [ 50%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdCollections::test_list_operations PASSED [ 50%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdCollections::test_set_operations PASSED [ 50%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdCollections::test_dict_key_operations PASSED [ 51%]
tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdCollections::test_sorting PASSED [ 51%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestLLMExecutionConfig::test_default_config_creation PASSED [ 51%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestLLMExecutionConfig::test_custom_config_creation PASSED [ 51%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestLLMExecutionResult::test_basic_result_creation PASSED [ 52%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestLLMExecutionResult::test_result_with_all_parameters PASSED [ 52%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestLLMExecutionResult::test_total_tokens_property PASSED [ 52%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestLLMExecutionResult::test_total_tokens_property_empty PASSED [ 52%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestLLMExecutionResult::test_total_cost_property PASSED [ 52%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestLLMExecutionResult::test_total_cost_property_no_cost_entry PASSED [ 53%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestProviderRouter::test_router_initialization PASSED [ 53%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestProviderRouter::test_register_provider PASSED [ 53%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestProviderRouter::test_register_multiple_providers PASSED [ 53%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestProviderRouter::test_get_provider_existing PASSED [ 54%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestProviderRouter::test_get_provider_non_existing PASSED [ 54%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestProviderRouter::test_select_provider_for_model_preferred PASSED [ 54%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestProviderRouter::test_select_provider_for_model_fallback_to_any PASSED [ 54%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestProviderRouter::test_select_provider_for_model_with_fallback PASSED [ 54%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestProviderRouter::test_select_provider_for_model_no_match PASSED [ 55%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestProviderRouter::test_can_handle_model_true PASSED [ 55%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestProviderRouter::test_can_handle_model_false PASSED [ 55%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestProviderRouter::test_is_provider_healthy_true PASSED [ 55%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestProviderRouter::test_is_provider_healthy_false_not_available PASSED [ 56%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestProviderRouter::test_is_provider_healthy_false_too_many_failures PASSED [ 56%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestProviderRouter::test_is_provider_healthy_unknown_provider PASSED [ 56%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceInitialization::test_initialization_minimal PASSED [ 56%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceInitialization::test_initialization_with_all_dependencies PASSED [ 56%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceInitialization::test_register_provider PASSED [ 57%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceExecution::test_execute_async_successful_flow PASSED [ 57%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceExecution::test_execute_async_cache_hit FAILED [ 57%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceExecution::test_execute_async_rate_limited PASSED [ 57%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceExecution::test_execute_async_budget_exceeded PASSED [ 58%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceExecution::test_execute_async_no_provider_available PASSED [ 58%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceExecution::test_execute_async_without_retry_policy PASSED [ 58%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceExecution::test_execute_async_with_exception PASSED [ 58%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceExecution::test_execute_async_caching_disabled PASSED [ 58%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceExecution::test_execute_async_rate_limiting_disabled PASSED [ 59%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceExecution::test_execute_async_budget_enforcement_disabled PASSED [ 59%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceExecution::test_execute_async_post_execution_processing PASSED [ 59%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceStreamingExecution::test_execute_stream_async_successful FAILED [ 59%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceStreamingExecution::test_execute_stream_async_rate_limited PASSED [ 60%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceStreamingExecution::test_execute_stream_async_no_provider PASSED [ 60%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceStreamingExecution::test_execute_stream_async_provider_exception FAILED [ 60%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceStreamingExecution::test_execute_stream_async_rate_limiting_disabled FAILED [ 60%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceStatisticsAndMetrics::test_get_execution_stats_async_with_requests PASSED [ 60%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceStatisticsAndMetrics::test_get_execution_stats_async_no_requests PASSED [ 61%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceStatisticsAndMetrics::test_estimate_request_cost_with_model_pricing PASSED [ 61%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceStatisticsAndMetrics::test_estimate_request_cost_no_pricing PASSED [ 61%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceStatisticsAndMetrics::test_estimate_request_cost_no_max_tokens PASSED [ 61%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceStatisticsAndMetrics::test_record_cached_usage FAILED [ 62%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceIntegration::test_minimal_execution_flow PASSED [ 62%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceIntegration::test_provider_selection_with_preferences PASSED [ 62%]
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceIntegration::test_error_handling_and_statistics PASSED [ 62%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderTypeEnum::test_all_provider_types_exist PASSED [ 63%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderTypeEnum::test_provider_type_string_values PASSED [ 63%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderTypeEnum::test_provider_type_str_method PASSED [ 63%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderTypeEnum::test_provider_type_uniqueness PASSED [ 63%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderTypeEnum::test_provider_type_membership PASSED [ 63%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelCapabilityEnum::test_all_model_capabilities_exist PASSED [ 64%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelCapabilityEnum::test_model_capability_string_values PASSED [ 64%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelCapabilityEnum::test_model_capability_str_method PASSED [ 64%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelCapabilityEnum::test_model_capability_uniqueness PASSED [ 64%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelCapabilityEnum::test_model_capability_membership PASSED [ 65%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdCreation::test_create_minimal_provider_id PASSED [ 65%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdCreation::test_create_full_provider_id PASSED [ 65%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdCreation::test_create_provider_id_with_string_key PASSED [ 65%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdCreation::test_frozen_dataclass_immutability PASSED [ 65%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdValidation::test_empty_provider_name_raises_error PASSED [ 66%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdValidation::test_invalid_provider_name_length_raises_errors PASSED [ 66%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdValidation::test_invalid_provider_name_characters_raise_errors PASSED [ 66%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdValidation::test_valid_provider_name_characters PASSED [ 66%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdValidation::test_invalid_provider_type_raises_error PASSED [ 67%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdValidation::test_invalid_api_version_format_raises_error PASSED [ 67%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdValidation::test_valid_api_version_formats PASSED [ 67%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdValidation::test_invalid_region_code_raises_errors PASSED [ 67%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdValidation::test_valid_region_codes PASSED [ 67%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdFactoryMethods::test_create_openai_default PASSED [ 68%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdFactoryMethods::test_create_openai_custom_params PASSED [ 68%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdFactoryMethods::test_create_anthropic_default PASSED [ 68%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdFactoryMethods::test_create_anthropic_custom_params PASSED [ 68%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdFactoryMethods::test_create_custom_provider PASSED [ 69%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdMethods::test_is_official_provider PASSED [ 69%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdMethods::test_supports_region PASSED [ 69%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdMethods::test_get_display_name PASSED [ 69%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestProviderIdMethods::test_str_representation PASSED [ 69%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdCreation::test_create_minimal_model_id PASSED [ 70%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdCreation::test_create_full_model_id PASSED [ 70%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdCreation::test_frozen_dataclass_immutability PASSED [ 70%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdValidation::test_empty_model_name_raises_error PASSED [ 70%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdValidation::test_invalid_model_name_length_raises_errors PASSED [ 71%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdValidation::test_invalid_model_name_characters_raise_errors PASSED [ 71%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdValidation::test_valid_model_name_characters PASSED [ 71%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdValidation::test_invalid_provider_id_raises_error PASSED [ 71%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdValidation::test_invalid_token_limits_raise_errors PASSED [ 71%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdValidation::test_invalid_costs_raise_errors PASSED [ 72%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdValidation::test_invalid_capabilities_raise_error PASSED [ 72%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdFactoryMethods::test_create_gpt4 PASSED [ 72%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdFactoryMethods::test_create_claude_default PASSED [ 72%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdFactoryMethods::test_create_claude_opus PASSED [ 73%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdFactoryMethods::test_create_claude_unknown_variant_uses_default PASSED [ 73%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdMethods::test_supports_capability PASSED [ 73%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdMethods::test_estimate_cost PASSED [ 73%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdMethods::test_estimate_cost_zero_tokens PASSED [ 73%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdMethods::test_can_handle_context PASSED [ 74%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdMethods::test_get_effective_context_limit PASSED [ 74%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdMethods::test_is_deprecated PASSED [ 74%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestModelIdMethods::test_str_representation PASSED [ 74%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetCreation::test_create_minimal_token_budget PASSED [ 75%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetCreation::test_create_full_token_budget PASSED [ 75%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetCreation::test_frozen_dataclass_immutability PASSED [ 75%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetValidation::test_empty_budget_id_raises_error PASSED [ 75%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetValidation::test_invalid_budget_id_length_raises_errors PASSED [ 76%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetValidation::test_invalid_budget_id_characters_raise_error PASSED [ 76%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetValidation::test_valid_budget_id_characters PASSED [ 76%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetValidation::test_invalid_token_values_raise_errors PASSED [ 76%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetValidation::test_token_budget_constraint_validation PASSED [ 76%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetValidation::test_invalid_cost_values_raise_errors PASSED [ 77%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetValidation::test_invalid_priority_raises_error PASSED [ 77%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetFactoryMethods::test_create_daily_budget_default PASSED [ 77%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetFactoryMethods::test_create_daily_budget_with_cost_limit PASSED [ 77%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetFactoryMethods::test_create_project_budget PASSED [ 78%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_get_available_tokens PASSED [ 78%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_get_available_tokens_negative_protected FAILED [ 78%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_get_utilization_percentage PASSED [ 78%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_get_utilization_percentage_zero_allocation PASSED [ 78%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_get_cost_utilization_percentage PASSED [ 79%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_get_cost_utilization_percentage_zero_limit PASSED [ 79%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_can_reserve_tokens PASSED [ 79%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_can_afford_cost PASSED [ 79%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_reserve_tokens PASSED [ 80%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_reserve_tokens_insufficient_budget PASSED [ 80%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_consume_tokens PASSED [ 80%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_consume_tokens_more_than_reserved PASSED [ 80%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_consume_tokens_exceeds_budget FAILED [ 80%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_consume_tokens_exceeds_cost_limit PASSED [ 81%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_is_exhausted PASSED [ 81%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_is_near_exhaustion FAILED [ 81%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_get_budget_summary PASSED [ 81%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_str_representation PASSED [ 82%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetEquality::test_equality_same_values FAILED [ 82%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetEquality::test_inequality_different_values FAILED [ 82%]
tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetEquality::test_equality_in_collections FAILED [ 82%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestTypeEnum::test_all_request_types_exist PASSED [ 82%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestTypeEnum::test_request_type_string_values PASSED [ 83%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestTypeEnum::test_request_type_str_method PASSED [ 83%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestTypeEnum::test_request_type_uniqueness PASSED [ 83%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseStatusEnum::test_all_response_statuses_exist PASSED [ 83%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseStatusEnum::test_response_status_string_values PASSED [ 84%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseStatusEnum::test_response_status_str_method PASSED [ 84%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestCreation::test_basic_request_creation PASSED [ 84%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestCreation::test_request_creation_with_all_parameters PASSED [ 84%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestCreation::test_request_validation_invalid_request_id PASSED [ 84%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestCreation::test_request_validation_invalid_request_type PASSED [ 85%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestCreation::test_request_validation_invalid_model_id PASSED [ 85%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestCreation::test_request_validation_empty_prompt PASSED [ 85%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestCreation::test_request_validation_invalid_temperature PASSED [ 85%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestCreation::test_request_validation_invalid_top_p PASSED [ 86%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestCreation::test_request_validation_invalid_penalties PASSED [ 86%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestCreation::test_request_validation_invalid_max_tokens PASSED [ 86%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestCreation::test_request_validation_max_tokens_exceeds_model_limit PASSED [ 86%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestCreation::test_request_validation_invalid_timeout PASSED [ 86%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestCreation::test_request_validation_duplicate_stop_sequences PASSED [ 87%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestFactoryMethods::test_create_chat_request_basic PASSED [ 87%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestFactoryMethods::test_create_chat_request_with_system_prompt PASSED [ 87%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestFactoryMethods::test_create_chat_request_with_custom_metadata PASSED [ 87%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestFactoryMethods::test_create_completion_request_basic PASSED [ 88%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestFactoryMethods::test_create_completion_request_with_parameters PASSED [ 88%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestBusinessMethods::test_estimate_input_tokens PASSED [ 88%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestBusinessMethods::test_estimate_input_tokens_no_system_prompt PASSED [ 88%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestBusinessMethods::test_get_effective_max_tokens_with_limit PASSED [ 89%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestBusinessMethods::test_get_effective_max_tokens_no_limit PASSED [ 89%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestBusinessMethods::test_get_effective_max_tokens_exceeds_model_limit PASSED [ 89%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestBusinessMethods::test_is_compatible_with_model_compatible PASSED [ 89%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestBusinessMethods::test_is_compatible_with_model_unsupported_capability PASSED [ 89%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMRequestBusinessMethods::test_is_compatible_with_model_context_too_large PASSED [ 90%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseCreation::test_basic_response_creation PASSED [ 90%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseCreation::test_response_creation_with_all_parameters PASSED [ 90%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseCreation::test_response_validation_invalid_request_id PASSED [ 90%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseCreation::test_response_validation_invalid_response_id PASSED [ 91%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseCreation::test_response_validation_invalid_status PASSED [ 91%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseCreation::test_response_validation_successful_without_content PASSED [ 91%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseCreation::test_response_validation_failed_without_error_details PASSED [ 91%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseCreation::test_response_validation_invalid_usage_stats PASSED [ 91%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseCreation::test_response_validation_invalid_cost_estimate PASSED [ 92%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseFactoryMethods::test_create_success_response PASSED [ 92%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseFactoryMethods::test_create_success_response_custom_finish_reason PASSED [ 92%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseFactoryMethods::test_create_error_response PASSED [ 92%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseFactoryMethods::test_create_error_response_with_model PASSED [ 93%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseBusinessMethods::test_is_successful_for_success_status PASSED [ 93%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseBusinessMethods::test_is_successful_for_partial_success_status PASSED [ 93%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseBusinessMethods::test_is_successful_for_error_status PASSED [ 93%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseBusinessMethods::test_get_total_tokens PASSED [ 93%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseBusinessMethods::test_get_input_tokens PASSED [ 94%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseBusinessMethods::test_get_output_tokens PASSED [ 94%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMResponseBusinessMethods::test_token_methods_with_empty_stats PASSED [ 94%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMProviderErrorHierarchy::test_base_llm_provider_error PASSED [ 94%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMProviderErrorHierarchy::test_base_error_without_optional_parameters PASSED [ 95%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMProviderErrorHierarchy::test_rate_limit_error PASSED [ 95%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMProviderErrorHierarchy::test_quota_exceeded_error PASSED [ 95%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMProviderErrorHierarchy::test_model_unavailable_error PASSED [ 95%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestLLMProviderErrorHierarchy::test_invalid_request_error PASSED [ 95%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestILLMProviderInterface::test_provider_properties PASSED [ 96%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestILLMProviderInterface::test_generate_async PASSED [ 96%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestILLMProviderInterface::test_generate_sync_wrapper PASSED [ 96%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestILLMProviderInterface::test_generate_stream_async PASSED [ 96%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestILLMProviderInterface::test_estimate_tokens PASSED [ 97%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestILLMProviderInterface::test_validate_request_valid PASSED [ 97%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestILLMProviderInterface::test_validate_request_invalid PASSED [ 97%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestILLMProviderInterface::test_get_model_info_existing PASSED [ 97%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestILLMProviderInterface::test_get_model_info_non_existing PASSED [ 97%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestILLMProviderInterface::test_health_check_async PASSED [ 98%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestILLMProviderInterface::test_health_check_sync_wrapper PASSED [ 98%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestILLMProviderInterface::test_supports_streaming_default PASSED [ 98%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestILLMProviderInterface::test_supports_function_calling PASSED [ 98%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestILLMProviderInterface::test_get_rate_limits_default PASSED [ 99%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestILLMProviderInterface::test_get_pricing_info PASSED [ 99%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestILLMProviderInterface::test_string_representation PASSED [ 99%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestILLMProviderWithBudget::test_generate_async_with_budget PASSED [ 99%]
tests/unit/contexts/ai/domain/test_llm_provider_interface.py::TestILLMProviderWithBudget::test_generate_stream_async_with_budget PASSED [100%]

================================== FAILURES ===================================
_________ TestAwarenessOperations.test_update_awareness_state_success _________

self = <tests.unit.contexts.subjective.application.test_subjective_application_service.TestAwarenessOperations object at 0x0000021FADB979D0>
mock_dependencies = {'command_handlers': <Mock spec='SubjectiveCommandHandlerRegistry' id='2335626718112'>, 'fog_service': <Mock spec='FogOfWarService' id='2335626722480'>, 'repository': <Mock spec='ITurnBriefRepository' id='2335626065440'>}
sample_awareness_state = AwarenessState(base_alertness=<AlertnessLevel.ALERT: 'alert'>, current_alertness=<AlertnessLevel.VIGILANT: 'vigilant'>...er.TRAINING: 'training'>: 0.3, <AwarenessModifier.CONFIDENCE: 'confidence'>: 0.2}, fatigue_level=0.1, stress_level=0.4)

    def test_update_awareness_state_success(self, mock_dependencies, sample_awareness_state):
        """Test successful awareness state update."""
        service = SubjectiveApplicationService(
            repository=mock_dependencies['repository'],
            fog_of_war_service=mock_dependencies['fog_service']
        )
    
        service.command_handlers = mock_dependencies['command_handlers']
        mock_dependencies['command_handlers'].handle_update_awareness_state.return_value = None
    
        # Mock the method since it might not exist in the truncated file
        if not hasattr(service, 'update_awareness_state'):
            def mock_update_awareness_state(entity_id, new_awareness_state, change_reason):
                command = UpdateAwarenessStateCommand(
                    entity_id=entity_id,
                    new_awareness_state=new_awareness_state,
                    change_reason=change_reason
                )
                service.command_handlers.handle_update_awareness_state(command)
    
            service.update_awareness_state = mock_update_awareness_state
    
>       service.update_awareness_state(
            entity_id="test_entity",
            new_awareness_state=sample_awareness_state,
            change_reason="combat_started"
        )
E       TypeError: SubjectiveApplicationService.update_awareness_state() got an unexpected keyword argument 'new_awareness_state'

tests\unit\contexts\subjective\application\test_subjective_application_service.py:512: TypeError
________________ TestPerceptionBonus.test_task_focused_penalty ________________

self = <tests.unit.contexts.subjective.domain.test_awareness_value_object.TestPerceptionBonus object at 0x0000021FADC64D10>

    def test_task_focused_penalty(self):
        """Test task-focused attention reduces perception."""
        state = AwarenessState(
            base_alertness=AlertnessLevel.ALERT,
            current_alertness=AlertnessLevel.ALERT,
            attention_focus=AttentionFocus.TASK_FOCUSED
        )
    
        bonus = state.get_perception_bonus()
>       assert bonus == 0.1  # 0.3 (alert) - 0.2 (task penalty) = 0.1
        ^^^^^^^^^^^^^^^^^^^
E       assert 0.09999999999999998 == 0.1

tests\unit\contexts\subjective\domain\test_awareness_value_object.py:413: AssertionError
____________ TestReactionTimeModifier.test_unconscious_no_reaction ____________

self = <tests.unit.contexts.subjective.domain.test_awareness_value_object.TestReactionTimeModifier object at 0x0000021FADC88A50>

    def test_unconscious_no_reaction(self):
        """Test unconscious state has no reaction capability."""
        state = AwarenessState(
            base_alertness=AlertnessLevel.UNCONSCIOUS,
            current_alertness=AlertnessLevel.UNCONSCIOUS,
            attention_focus=AttentionFocus.UNFOCUSED
        )
    
        modifier = state.get_reaction_time_modifier()
>       assert modifier == 10.0  # No reaction
        ^^^^^^^^^^^^^^^^^^^^^^^
E       assert 11.5 == 10.0

tests\unit\contexts\subjective\domain\test_awareness_value_object.py:450: AssertionError
__________ TestReactionTimeModifier.test_sleeping_very_slow_reaction __________

self = <tests.unit.contexts.subjective.domain.test_awareness_value_object.TestReactionTimeModifier object at 0x0000021FADC88B90>

    def test_sleeping_very_slow_reaction(self):
        """Test sleeping state has very slow reaction."""
        state = AwarenessState(
            base_alertness=AlertnessLevel.SLEEPING,
            current_alertness=AlertnessLevel.SLEEPING,
            attention_focus=AttentionFocus.UNFOCUSED
        )
    
        modifier = state.get_reaction_time_modifier()
>       assert modifier == 5.0  # Very slow reaction
        ^^^^^^^^^^^^^^^^^^^^^^
E       assert 5.75 == 5.0

tests\unit\contexts\subjective\domain\test_awareness_value_object.py:461: AssertionError
____________ TestReactionTimeModifier.test_vigilant_fast_reaction _____________

self = <tests.unit.contexts.subjective.domain.test_awareness_value_object.TestReactionTimeModifier object at 0x0000021FADC19A70>

    def test_vigilant_fast_reaction(self):
        """Test vigilant state has fast reaction time."""
        state = AwarenessState(
            base_alertness=AlertnessLevel.VIGILANT,
            current_alertness=AlertnessLevel.VIGILANT,
            attention_focus=AttentionFocus.UNFOCUSED
        )
    
        modifier = state.get_reaction_time_modifier()
>       assert modifier == 0.6  # Fast reaction
        ^^^^^^^^^^^^^^^^^^^^^^
E       assert 0.69 == 0.6

tests\unit\contexts\subjective\domain\test_awareness_value_object.py:472: AssertionError
_____________ TestComplexScenarios.test_exhausted_guard_scenario ______________

self = <tests.unit.contexts.subjective.domain.test_awareness_value_object.TestComplexScenarios object at 0x0000021FADC89450>

    def test_exhausted_guard_scenario(self):
        """Test a complex scenario: exhausted guard on duty."""
        exhausted_guard = AwarenessState(
            base_alertness=AlertnessLevel.ALERT,
            current_alertness=AlertnessLevel.DROWSY,
            attention_focus=AttentionFocus.ENVIRONMENTAL,
            awareness_modifiers={
                AwarenessModifier.FATIGUE: -0.7,
                AwarenessModifier.TRAINING: 0.4
            },
            fatigue_level=0.8,
            stress_level=0.6
        )
    
        # Should be degraded but still somewhat functional due to training
        effective_alertness = exhausted_guard.calculate_effective_alertness()
        perception_bonus = exhausted_guard.get_perception_bonus()
        reaction_modifier = exhausted_guard.get_reaction_time_modifier()
    
        # Still conscious but degraded
>       assert effective_alertness in [
            AlertnessLevel.SLEEPING, AlertnessLevel.DROWSY, AlertnessLevel.RELAXED
        ]
E       AssertionError: assert <AlertnessLevel.UNCONSCIOUS: 'unconscious'> in [<AlertnessLevel.SLEEPING: 'sleeping'>, <AlertnessLevel.DROWSY: 'drowsy'>, <AlertnessLevel.RELAXED: 'relaxed'>]

tests\unit\contexts\subjective\domain\test_awareness_value_object.py:769: AssertionError
____________ TestComplexScenarios.test_enhanced_sentinel_scenario _____________

self = <tests.unit.contexts.subjective.domain.test_awareness_value_object.TestComplexScenarios object at 0x0000021FADC89590>

    def test_enhanced_sentinel_scenario(self):
        """Test a complex scenario: magically enhanced sentinel."""
        enhanced_sentinel = AwarenessState(
            base_alertness=AlertnessLevel.ALERT,
            current_alertness=AlertnessLevel.VIGILANT,
            attention_focus=AttentionFocus.THREAT_SCANNING,
            awareness_modifiers={
                AwarenessModifier.MAGICAL_ENHANCEMENT: 0.8,
                AwarenessModifier.TRAINING: 0.6,
                AwarenessModifier.CONFIDENCE: 0.4
            },
            fatigue_level=0.0,
            stress_level=0.2  # Optimal stress level
        )
    
        effective_alertness = enhanced_sentinel.calculate_effective_alertness()
        perception_bonus = enhanced_sentinel.get_perception_bonus()
        reaction_modifier = enhanced_sentinel.get_reaction_time_modifier()
    
        # Should be at maximum alertness
        assert effective_alertness == AlertnessLevel.PARANOID
    
        # Excellent perception
>       assert perception_bonus >= 1.0  # High bonus from alertness + threat scanning
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       assert 0.8 >= 1.0

tests\unit\contexts\subjective\domain\test_awareness_value_object.py:809: AssertionError
________________ TestEdgeCases.test_empty_string_focus_target _________________

self = <tests.unit.contexts.subjective.domain.test_awareness_value_object.TestEdgeCases object at 0x0000021FADC1A650>

    def test_empty_string_focus_target(self):
        """Test behavior with empty string as focus target."""
        # This should be allowed - empty string is different from None
>       state = AwarenessState(
            base_alertness=AlertnessLevel.ALERT,
            current_alertness=AlertnessLevel.ALERT,
            attention_focus=AttentionFocus.TARGET_SPECIFIC,
            focus_target=""  # Empty string, not None
        )

tests\unit\contexts\subjective\domain\test_awareness_value_object.py:954: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = AwarenessState(base_alertness=<AlertnessLevel.ALERT: 'alert'>, current_alertness=<AlertnessLevel.ALERT: 'alert'>, atte...ocus.TARGET_SPECIFIC: 'target_specific'>, focus_target='', awareness_modifiers={}, fatigue_level=0.0, stress_level=0.0)
base_alertness = <AlertnessLevel.ALERT: 'alert'>
current_alertness = <AlertnessLevel.ALERT: 'alert'>
attention_focus = <AttentionFocus.TARGET_SPECIFIC: 'target_specific'>
focus_target = '', awareness_modifiers = None, fatigue_level = 0.0
stress_level = 0.0

>   ???

<string>:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = AwarenessState(base_alertness=<AlertnessLevel.ALERT: 'alert'>, current_alertness=<AlertnessLevel.ALERT: 'alert'>, atte...ocus.TARGET_SPECIFIC: 'target_specific'>, focus_target='', awareness_modifiers={}, fatigue_level=0.0, stress_level=0.0)

    def __post_init__(self):
        """Validate awareness state parameters."""
        # Initialize empty dict for modifiers if None
        if self.awareness_modifiers is None:
            object.__setattr__(self, 'awareness_modifiers', {})
        elif not isinstance(self.awareness_modifiers, dict):
            object.__setattr__(self, 'awareness_modifiers', dict(self.awareness_modifiers))
    
        # Validate modifier values
        for modifier, value in self.awareness_modifiers.items():
            if not isinstance(modifier, AwarenessModifier):
                raise ValueError(f"Invalid awareness modifier: {modifier}")
            if not isinstance(value, (int, float)):
                raise ValueError(f"Modifier value for {modifier} must be numeric")
            if not -1.0 <= value <= 1.0:
                raise ValueError(f"Modifier value for {modifier} must be between -1.0 and 1.0")
    
        # Validate levels
        if not 0.0 <= self.fatigue_level <= 1.0:
            raise ValueError("Fatigue level must be between 0.0 and 1.0")
    
        if not 0.0 <= self.stress_level <= 1.0:
            raise ValueError("Stress level must be between 0.0 and 1.0")
    
        # Validate focus target consistency
        if self.attention_focus == AttentionFocus.TARGET_SPECIFIC and not self.focus_target:
>           raise ValueError("Target-specific focus requires a focus target")
E           ValueError: Target-specific focus requires a focus target

contexts\subjective\domain\value_objects\awareness.py:93: ValueError
_ TestKnowledgeBaseQuerying.test_has_knowledge_about_with_sufficient_certainty _

self = <tests.unit.contexts.subjective.domain.test_knowledge_level_value_object.TestKnowledgeBaseQuerying object at 0x0000021FADC657B0>
sample_knowledge_base = KnowledgeBase(knowledge_items={'enemy_position': [KnowledgeItem(subject='enemy_position', information='Enemy at north ...LY: 'reported_by_ally'>, acquired_at=datetime.datetime(2025, 8, 27, 21, 34, 1, 613187), expires_at=None, tags=set())]})

    def test_has_knowledge_about_with_sufficient_certainty(self, sample_knowledge_base):
        """Test has_knowledge_about with sufficient certainty."""
        # Should have knowledge about enemy position with high certainty
>       assert sample_knowledge_base.has_knowledge_about("enemy_position", CertaintyLevel.HIGH)
E       AssertionError: assert False
E        +  where False = has_knowledge_about('enemy_position', <CertaintyLevel.HIGH: 'high'>)
E        +    where has_knowledge_about = KnowledgeBase(knowledge_items={'enemy_position': [KnowledgeItem(subject='enemy_position', information='Enemy at north gate', knowledge_type=<KnowledgeType.FACTUAL: 'factual'>, certainty_level=<CertaintyLevel.ABSOLUTE: 'absolute'>, source=<KnowledgeSource.DIRECT_OBSERVATION: 'direct_observation'>, acquired_at=datetime.datetime(2025, 8, 27, 21, 34, 1, 613187), expires_at=datetime.datetime(2025, 8, 27, 22, 34, 1, 613187), tags=set()), KnowledgeItem(subject='enemy_position', information='Enemy was at south gate', knowledge_type=<KnowledgeType.FACTUAL: 'factual'>, certainty_level=<CertaintyLevel.HIGH: 'high'>, source=<KnowledgeSource.DIRECT_OBSERVATION: 'direct_observation'>, acquired_at=datetime.datetime(2025, 8, 27, 19, 34, 1, 613187), expires_at=datetime.datetime(2025, 8, 27, 21, 4, 1, 613187), tags=set())], 'guard_patrol': [KnowledgeItem(subject='guard_patrol', information='Guards might change shifts soon', knowledge_type=<KnowledgeType.SPECULATION: 'speculation'>, certainty_level=<CertaintyLevel.MINIMAL: 'minimal'>, source=<KnowledgeSource.SPECULATION: 'speculation'>, acquired_at=datetime.datetime(2025, 8, 27, 21, 34, 1, 613187), expires_at=None, tags=set()), KnowledgeItem(subject='guard_patrol', information='Guards change every 4 hours', knowledge_type=<KnowledgeType.TACTICAL: 'tactical'>, certainty_level=<CertaintyLevel.HIGH: 'high'>, source=<KnowledgeSource.REPORTED_BY_ALLY: 'reported_by_ally'>, acquired_at=datetime.datetime(2025, 8, 27, 21, 34, 1, 613187), expires_at=None, tags=set())]}).has_knowledge_about
E        +    and   <CertaintyLevel.HIGH: 'high'> = CertaintyLevel.HIGH

tests\unit\contexts\subjective\domain\test_knowledge_level_value_object.py:645: AssertionError
__ TestKnowledgeBaseQuerying.test_has_knowledge_about_insufficient_certainty __

self = <tests.unit.contexts.subjective.domain.test_knowledge_level_value_object.TestKnowledgeBaseQuerying object at 0x0000021FADC70E50>
sample_knowledge_base = KnowledgeBase(knowledge_items={'enemy_position': [KnowledgeItem(subject='enemy_position', information='Enemy at north ...LY: 'reported_by_ally'>, acquired_at=datetime.datetime(2025, 8, 27, 21, 34, 1, 638055), expires_at=None, tags=set())]})

    def test_has_knowledge_about_insufficient_certainty(self, sample_knowledge_base):
        """Test has_knowledge_about with insufficient certainty."""
        # Guard patrol knowledge might not meet absolute certainty requirement
        guard_knowledge = sample_knowledge_base.get_knowledge_about("guard_patrol")
        absolute_knowledge = [k for k in guard_knowledge if k.certainty_level == CertaintyLevel.ABSOLUTE]
    
        if not absolute_knowledge:
>           assert not sample_knowledge_base.has_knowledge_about("guard_patrol", CertaintyLevel.ABSOLUTE)
E           AssertionError: assert not True
E            +  where True = has_knowledge_about('guard_patrol', <CertaintyLevel.ABSOLUTE: 'absolute'>)
E            +    where has_knowledge_about = KnowledgeBase(knowledge_items={'enemy_position': [KnowledgeItem(subject='enemy_position', information='Enemy at north gate', knowledge_type=<KnowledgeType.FACTUAL: 'factual'>, certainty_level=<CertaintyLevel.ABSOLUTE: 'absolute'>, source=<KnowledgeSource.DIRECT_OBSERVATION: 'direct_observation'>, acquired_at=datetime.datetime(2025, 8, 27, 21, 34, 1, 638055), expires_at=datetime.datetime(2025, 8, 27, 22, 34, 1, 638055), tags=set()), KnowledgeItem(subject='enemy_position', information='Enemy was at south gate', knowledge_type=<KnowledgeType.FACTUAL: 'factual'>, certainty_level=<CertaintyLevel.HIGH: 'high'>, source=<KnowledgeSource.DIRECT_OBSERVATION: 'direct_observation'>, acquired_at=datetime.datetime(2025, 8, 27, 19, 34, 1, 638055), expires_at=datetime.datetime(2025, 8, 27, 21, 4, 1, 638055), tags=set())], 'guard_patrol': [KnowledgeItem(subject='guard_patrol', information='Guards might change shifts soon', knowledge_type=<KnowledgeType.SPECULATION: 'speculation'>, certainty_level=<CertaintyLevel.MINIMAL: 'minimal'>, source=<KnowledgeSource.SPECULATION: 'speculation'>, acquired_at=datetime.datetime(2025, 8, 27, 21, 34, 1, 638055), expires_at=None, tags=set()), KnowledgeItem(subject='guard_patrol', information='Guards change every 4 hours', knowledge_type=<KnowledgeType.TACTICAL: 'tactical'>, certainty_level=<CertaintyLevel.HIGH: 'high'>, source=<KnowledgeSource.REPORTED_BY_ALLY: 'reported_by_ally'>, acquired_at=datetime.datetime(2025, 8, 27, 21, 34, 1, 638055), expires_at=None, tags=set())]}).has_knowledge_about
E            +    and   <CertaintyLevel.ABSOLUTE: 'absolute'> = CertaintyLevel.ABSOLUTE

tests\unit\contexts\subjective\domain\test_knowledge_level_value_object.py:657: AssertionError
__ TestVisibilityCalculation.test_visibility_within_range_perfect_conditions __

self = <tests.unit.contexts.subjective.domain.test_perception_range_value_object.TestVisibilityCalculation object at 0x0000021FADD18640>

    def test_visibility_within_range_perfect_conditions(self):
        """Test visibility calculation within range with perfect conditions."""
        perception_range = PerceptionRange(
            perception_type=PerceptionType.VISUAL,
            base_range=100.0,
            effective_range=100.0,
            accuracy_modifier=1.0,
            environmental_modifiers={}
        )
    
        # Very close - should be clear
        visibility_close = perception_range.calculate_visibility_at_distance(10.0)
        assert visibility_close == VisibilityLevel.CLEAR
    
        # Medium distance - should still be clear or partial
        visibility_medium = perception_range.calculate_visibility_at_distance(50.0)
>       assert visibility_medium in [VisibilityLevel.CLEAR, VisibilityLevel.PARTIAL]
E       AssertionError: assert <VisibilityLevel.OBSCURED: 'obscured'> in [<VisibilityLevel.CLEAR: 'clear'>, <VisibilityLevel.PARTIAL: 'partial'>]

tests\unit\contexts\subjective\domain\test_perception_range_value_object.py:241: AssertionError
_ TestPerceptionCapabilitiesBusinessLogic.test_get_maximum_range_empty_ranges _

self = <tests.unit.contexts.subjective.domain.test_perception_range_value_object.TestPerceptionCapabilitiesBusinessLogic object at 0x0000021FADD39EB0>

    def test_get_maximum_range_empty_ranges(self):
        """Test getting maximum range with no perception ranges (edge case)."""
        # This shouldn't happen due to validation, but test the method directly
        visual_range = PerceptionRange(
            perception_type=PerceptionType.VISUAL,
            base_range=100.0,
            effective_range=80.0,
            accuracy_modifier=0.8,
            environmental_modifiers={}
        )
    
        # Create capabilities normally, then test empty case directly
        capabilities = PerceptionCapabilities(
            perception_ranges={PerceptionType.VISUAL: visual_range}
        )
    
        # Temporarily clear ranges to test the method
        empty_capabilities = PerceptionCapabilities.__new__(PerceptionCapabilities)
>       empty_capabilities.perception_ranges = {}
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests\unit\contexts\subjective\domain\test_perception_range_value_object.py:658: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <[AttributeError("'PerceptionCapabilities' object has no attribute 'perception_ranges'") raised in repr()] PerceptionCapabilities object at 0x21fce611ad0>
name = 'perception_ranges', value = {}

>   ???
E   dataclasses.FrozenInstanceError: cannot assign to field 'perception_ranges'

<string>:18: FrozenInstanceError
_______ TestSubjectiveIdFactoryMethods.test_from_string_invalid_format ________

self = <tests.unit.contexts.subjective.domain.test_subjective_id_value_object.TestSubjectiveIdFactoryMethods object at 0x0000021FADD39130>

    def test_from_string_invalid_format(self):
        """Test from_string fails with invalid UUID format."""
        invalid_strings = [
            "not-a-uuid",
            "12345678-1234-5678-9abc",  # Too short
            "12345678-1234-5678-9abc-123456789abc-extra",  # Too long
            "12345678-1234-5678-xyz-123456789abc",  # Invalid characters
            "12345678-1234-56789abc-123456789abc",  # Wrong dash placement
            "",
            "   ",
        ]
    
        for invalid_string in invalid_strings:
>           with pytest.raises(ValueError, match="Invalid UUID string"):
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           Failed: DID NOT RAISE <class 'ValueError'>

tests\unit\contexts\subjective\domain\test_subjective_id_value_object.py:136: Failed
_______ TestSubjectiveIdFactoryMethods.test_from_string_non_string_type _______

self = <tests.unit.contexts.subjective.domain.test_subjective_id_value_object.TestSubjectiveIdFactoryMethods object at 0x0000021FADC66470>

    def test_from_string_non_string_type(self):
        """Test from_string fails with non-string types."""
        with pytest.raises(ValueError, match="Invalid UUID string"):
>           SubjectiveId.from_string(12345)

tests\unit\contexts\subjective\domain\test_subjective_id_value_object.py:147: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <class 'contexts.subjective.domain.value_objects.subjective_id.SubjectiveId'>
uuid_string = 12345

    @classmethod
    def from_string(cls, uuid_string: str) -> 'SubjectiveId':
        """Create SubjectiveId from string representation."""
        try:
>           uuid_value = UUID(uuid_string)
                         ^^^^^^^^^^^^^^^^^

contexts\subjective\domain\value_objects\subjective_id.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <[AttributeError("'uuid.UUID' object has no attribute 'int'") raised in repr()] UUID object at 0x21fce679490>
hex = 12345, bytes = None, bytes_le = None, fields = None, int = None
version = None

    def __init__(self, hex=None, bytes=None, bytes_le=None, fields=None,
                       int=None, version=None,
                       *, is_safe=SafeUUID.unknown):
        r"""Create a UUID from either a string of 32 hexadecimal digits,
        a string of 16 bytes as the 'bytes' argument, a string of 16 bytes
        in little-endian order as the 'bytes_le' argument, a tuple of six
        integers (32-bit time_low, 16-bit time_mid, 16-bit time_hi_version,
        8-bit clock_seq_hi_variant, 8-bit clock_seq_low, 48-bit node) as
        the 'fields' argument, or a single 128-bit integer as the 'int'
        argument.  When a string of hex digits is given, curly braces,
        hyphens, and a URN prefix are all optional.  For example, these
        expressions all yield the same UUID:
    
        UUID('{12345678-1234-5678-1234-567812345678}')
        UUID('12345678123456781234567812345678')
        UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
        UUID(bytes='\x12\x34\x56\x78'*4)
        UUID(bytes_le='\x78\x56\x34\x12\x34\x12\x78\x56' +
                      '\x12\x34\x56\x78\x12\x34\x56\x78')
        UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))
        UUID(int=0x12345678123456781234567812345678)
    
        Exactly one of 'hex', 'bytes', 'bytes_le', 'fields', or 'int' must
        be given.  The 'version' argument is optional; if given, the resulting
        UUID will have its variant and version set according to RFC 4122,
        overriding the given 'hex', 'bytes', 'bytes_le', 'fields', or 'int'.
    
        is_safe is an enum exposed as an attribute on the instance.  It
        indicates whether the UUID has been generated in a way that is safe
        for multiprocessing applications, via uuid_generate_time_safe(3).
        """
    
        if [hex, bytes, bytes_le, fields, int].count(None) != 4:
            raise TypeError('one of the hex, bytes, bytes_le, fields, '
                            'or int arguments must be given')
        if hex is not None:
>           hex = hex.replace('urn:', '').replace('uuid:', '')
                  ^^^^^^^^^^^
E           AttributeError: 'int' object has no attribute 'replace'

C:\ProgramData\miniconda3\Lib\uuid.py:178: AttributeError
_________ TestExecuteLLMServiceExecution.test_execute_async_cache_hit _________

self = <tests.unit.contexts.ai.application.test_execute_llm_service.TestExecuteLLMServiceExecution object at 0x0000021FAE4042D0>

    @pytest.mark.asyncio
    async def test_execute_async_cache_hit(self):
        """Test execution flow with cache hit."""
        # Setup cache hit
        cached_response = self.success_response
        self.mock_cache_service.get_async.return_value = cached_response
    
        config = LLMExecutionConfig(enable_caching=True, track_costs=True)
    
        # Execute
        result = await self.service.execute_async(self.request, self.budget, config)
    
        # Verify result
        assert result.success is True
>       assert result.response == cached_response
E       AssertionError: assert LLMResponse(r...r_response={}) == LLMResponse(r...r_response={})
E         
E         Omitting 3 identical items, use -vv to show
E         Differing attributes:
E         ['response_id',
E          'status',
E          'content',
E          'finish_reason',...
E         
E         ...Full output truncated (47 lines hidden), use '-vv' to show

tests\unit\contexts\ai\application\test_execute_llm_service.py:556: AssertionError
_ TestExecuteLLMServiceStreamingExecution.test_execute_stream_async_successful _

self = <tests.unit.contexts.ai.application.test_execute_llm_service.TestExecuteLLMServiceStreamingExecution object at 0x0000021FAE404410>

    @pytest.mark.asyncio
    async def test_execute_stream_async_successful(self):
        """Test successful streaming execution."""
        # Setup rate limiting
        rate_limit_result = Mock()
        rate_limit_result.allowed = True
        self.mock_rate_limiter.check_rate_limit_async.return_value = rate_limit_result
    
        # Setup streaming response
        async def mock_stream():
            for chunk in ["Hello", " ", "world", "!"]:
                yield chunk
    
        self.mock_provider.generate_stream_async.return_value = mock_stream()
    
        # Execute streaming
        chunks = []
        async for chunk in self.service.execute_stream_async(self.request, self.budget):
            chunks.append(chunk)
    
        # Verify chunks
>       assert chunks == ["Hello", " ", "world", "!"]
E       assert ["Error: 'asy...ot coroutine"] == ['Hello', ' ', 'world', '!']
E         
E         At index 0 diff: "Error: 'async for' requires an object with __aiter__ method, got coroutine" != 'Hello'
E         Right contains 3 more items, first extra item: ' '
E         
E         Full diff:
E           [
E         +     "Error: 'async for' requires an object with __aiter__ method, got "...
E         
E         ...Full output truncated (6 lines hidden), use '-vv' to show

tests\unit\contexts\ai\application\test_execute_llm_service.py:846: AssertionError
_ TestExecuteLLMServiceStreamingExecution.test_execute_stream_async_provider_exception _

self = <tests.unit.contexts.ai.application.test_execute_llm_service.TestExecuteLLMServiceStreamingExecution object at 0x0000021FADFFDE00>

    @pytest.mark.asyncio
    async def test_execute_stream_async_provider_exception(self):
        """Test streaming execution with provider exception."""
        # Setup rate limiting
        rate_limit_result = Mock()
        rate_limit_result.allowed = True
        self.mock_rate_limiter.check_rate_limit_async.return_value = rate_limit_result
    
        # Setup provider exception
        self.mock_provider.generate_stream_async.side_effect = RuntimeError("Provider error")
    
        # Execute streaming
        chunks = []
        async for chunk in self.service.execute_stream_async(self.request, self.budget):
            chunks.append(chunk)
    
        # Verify error was yielded
        assert len(chunks) == 1
>       assert "Error: Provider error" in chunks[0]
E       assert 'Error: Provider error' in "Error: 'async for' requires an object with __aiter__ method, got coroutine"

tests\unit\contexts\ai\application\test_execute_llm_service.py:908: AssertionError
_ TestExecuteLLMServiceStreamingExecution.test_execute_stream_async_rate_limiting_disabled _

self = <tests.unit.contexts.ai.application.test_execute_llm_service.TestExecuteLLMServiceStreamingExecution object at 0x0000021FAE418710>

    @pytest.mark.asyncio
    async def test_execute_stream_async_rate_limiting_disabled(self):
        """Test streaming execution with rate limiting disabled."""
        config = LLMExecutionConfig(enforce_rate_limits=False, enable_streaming=True)
    
        # Setup streaming response
        async def mock_stream():
            yield "Streaming content"
    
        self.mock_provider.generate_stream_async.return_value = mock_stream()
    
        # Execute streaming
        chunks = []
        async for chunk in self.service.execute_stream_async(self.request, self.budget, config):
            chunks.append(chunk)
    
        # Verify chunks
>       assert chunks == ["Streaming content"]
E       assert ["Error: 'asy...ot coroutine"] == ['Streaming content']
E         
E         At index 0 diff: "Error: 'async for' requires an object with __aiter__ method, got coroutine" != 'Streaming content'
E         
E         Full diff:
E           [
E         -     'Streaming content',
E         +     "Error: 'async for' requires an object with __aiter__ method, got "
E         +     'coroutine',
E           ]

tests\unit\contexts\ai\application\test_execute_llm_service.py:927: AssertionError
_____ TestExecuteLLMServiceStatisticsAndMetrics.test_record_cached_usage ______

self = <tests.unit.contexts.ai.application.test_execute_llm_service.TestExecuteLLMServiceStatisticsAndMetrics object at 0x0000021FAE01CE20>

    @pytest.mark.asyncio
    async def test_record_cached_usage(self):
        """Test recording usage for cached responses."""
        from contexts.ai.infrastructure.policies.cost_tracking import CostEntry
    
        mock_cost_tracker = AsyncMock()
        service = ExecuteLLMService(cost_tracker=mock_cost_tracker)
    
        provider_id = ProviderId.create_openai()
        model_id = ModelId.create_gpt4(provider_id)
    
        request = LLMRequest.create_completion_request(
            model_id=model_id,
            prompt="Test prompt"
        )
    
        response = LLMResponse.create_success(
            request_id=request.request_id,
            content="Cached response",
            model_id=model_id,
            input_tokens=10,
            output_tokens=5
        )
    
        config = LLMExecutionConfig(client_id="test-client")
    
>       await service._record_cached_usage(request, response, config)

tests\unit\contexts\ai\application\test_execute_llm_service.py:1072: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <contexts.ai.application.services.execute_llm_service.ExecuteLLMService object at 0x0000021FCE91C0D0>
request = LLMRequest(request_id=UUID('d6fafb64-70df-44b3-863b-ed1474b42394'), request_type=<LLMRequestType.COMPLETION: 'completi...cy_penalty=0.0, stop_sequences=[], functions=None, timeout_seconds=30, stream=False, metadata={'format': 'completion'})
response = LLMResponse(request_id=UUID('d6fafb64-70df-44b3-863b-ed1474b42394'), response_id=UUID('469121fc-7663-4da3-9727-260dfd8...kens': 5, 'total_tokens': 15}, cost_estimate=Decimal('0.00060'), metadata={}, error_details=None, provider_response={})
config = LLMExecutionConfig(enable_caching=True, cache_ttl_seconds=3600, enforce_rate_limits=True, client_id='test-client', tra..._budgets=True, enable_retries=True, preferred_providers=[], fallback_providers=[], enable_streaming=False, metadata={})

    async def _record_cached_usage(
        self,
        request: LLMRequest,
        response: LLMResponse,
        config: LLMExecutionConfig
    ) -> None:
        """Record usage for cached responses."""
        if self._cost_tracker:
            cost_entry = CostEntry.from_request_response(
                request, response,
                None,  # No budget for cached responses
                config.client_id
            )
            # Mark as cached with zero cost
>           cost_entry = cost_entry.__class__(
                **{**cost_entry.__dict__, 'total_cost': Decimal('0')}
            )

contexts\ai\application\services\execute_llm_service.py:561: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = CostEntry(entry_id=UUID('287db344-5198-4339-8e5b-055024d41e8b'), timestamp=datetime.datetime(2025, 8, 27, 21, 34, 2, 2...Decimal('0.0003'), total_cost=Decimal('0'), budget_id=None, client_id='test-client', metadata={'format': 'completion'})
entry_id = UUID('287db344-5198-4339-8e5b-055024d41e8b')
timestamp = datetime.datetime(2025, 8, 27, 21, 34, 2, 287453)
provider_id = ProviderId(provider_name='OpenAI', provider_type=<ProviderType.OPENAI: 'openai'>, provider_key=UUID('e2da2c55-8be6-437...35911'), api_version='1.0.0', region='US', metadata={'official': True, 'chat_models': True, 'completion_models': True})
model_id = ModelId(model_name='gpt-4', provider_id=ProviderId(provider_name='OpenAI', provider_type=<ProviderType.OPENAI: 'openai...imal('0.00006'), model_version='2023-11', deprecated=False, metadata={'family': 'gpt-4', 'training_cutoff': '2023-04'})
request_id = UUID('d6fafb64-70df-44b3-863b-ed1474b42394')
operation_type = 'completion', input_tokens = 10, output_tokens = 5
total_tokens = 15, input_cost = Decimal('0.0003')
output_cost = Decimal('0.0003'), total_cost = Decimal('0'), budget_id = None
client_id = 'test-client', metadata = {'format': 'completion'}

>   ???

<string>:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = CostEntry(entry_id=UUID('287db344-5198-4339-8e5b-055024d41e8b'), timestamp=datetime.datetime(2025, 8, 27, 21, 34, 2, 2...Decimal('0.0003'), total_cost=Decimal('0'), budget_id=None, client_id='test-client', metadata={'format': 'completion'})

    def __post_init__(self):
        """Validate cost entry data integrity."""
        if self.input_tokens < 0:
            raise ValueError("input_tokens cannot be negative")
        if self.output_tokens < 0:
            raise ValueError("output_tokens cannot be negative")
        if self.total_tokens != self.input_tokens + self.output_tokens:
            raise ValueError("total_tokens must equal input_tokens + output_tokens")
    
        if self.input_cost < 0:
            raise ValueError("input_cost cannot be negative")
        if self.output_cost < 0:
            raise ValueError("output_cost cannot be negative")
        if abs(self.total_cost - (self.input_cost + self.output_cost)) > Decimal('0.0001'):
>           raise ValueError("total_cost must equal input_cost + output_cost")
E           ValueError: total_cost must equal input_cost + output_cost

contexts\ai\infrastructure\policies\cost_tracking.py:62: ValueError
_____ TestTokenBudgetMethods.test_get_available_tokens_negative_protected _____

self = <tests.unit.contexts.ai.domain.test_common_value_objects.TestTokenBudgetMethods object at 0x0000021FAE406D50>

    def test_get_available_tokens_negative_protected(self):
        """Test that get_available_tokens returns 0 when result would be negative."""
>       budget = TokenBudget(
            budget_id="test",
            allocated_tokens=1000,
            consumed_tokens=800,
            reserved_tokens=300
        )

tests\unit\contexts\ai\domain\test_common_value_objects.py:1023: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = TokenBudget(budget_id='test', allocated_tokens=1000, consumed_tokens=800, reserved_tokens=300, cost_limit=Decimal('100..., accumulated_cost=Decimal('0.00'), period_start=None, period_end=None, rollover_enabled=True, priority=5, metadata={})
budget_id = 'test', allocated_tokens = 1000, consumed_tokens = 800
reserved_tokens = 300, cost_limit = None, accumulated_cost = None
period_start = None, period_end = None, rollover_enabled = True, priority = 5
metadata = None

>   ???

<string>:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = TokenBudget(budget_id='test', allocated_tokens=1000, consumed_tokens=800, reserved_tokens=300, cost_limit=Decimal('100..., accumulated_cost=Decimal('0.00'), period_start=None, period_end=None, rollover_enabled=True, priority=5, metadata={})

    def __post_init__(self):
        """Validate TokenBudget business rules and constraints."""
        # Initialize optional fields
        if self.cost_limit is None:
            object.__setattr__(self, 'cost_limit', Decimal('1000.00'))  # $1000 default
    
        if self.accumulated_cost is None:
            object.__setattr__(self, 'accumulated_cost', Decimal('0.00'))
    
        if self.metadata is None:
            object.__setattr__(self, 'metadata', {})
    
        # Validate budget_id
        if not self.budget_id or not isinstance(self.budget_id, str):
            raise ValueError("budget_id is required and must be a string")
    
        if not (3 <= len(self.budget_id) <= 100):
            raise ValueError("budget_id must be 3-100 characters long")
    
        if not re.match(r'^[a-zA-Z0-9\-_\.]+$', self.budget_id):
            raise ValueError("budget_id contains invalid characters")
    
        # Validate token values
        if not isinstance(self.allocated_tokens, int) or self.allocated_tokens <= 0:
            raise ValueError("allocated_tokens must be a positive integer")
    
        if not isinstance(self.consumed_tokens, int) or self.consumed_tokens < 0:
            raise ValueError("consumed_tokens must be a non-negative integer")
    
        if not isinstance(self.reserved_tokens, int) or self.reserved_tokens < 0:
            raise ValueError("reserved_tokens must be a non-negative integer")
    
        # Validate token budget constraints
        if self.consumed_tokens + self.reserved_tokens > self.allocated_tokens:
>           raise ValueError("consumed + reserved tokens cannot exceed allocated tokens")
E           ValueError: consumed + reserved tokens cannot exceed allocated tokens

contexts\ai\domain\value_objects\common.py:441: ValueError
__________ TestTokenBudgetMethods.test_consume_tokens_exceeds_budget __________

self = <tests.unit.contexts.ai.domain.test_common_value_objects.TestTokenBudgetMethods object at 0x0000021FAE416890>

    def test_consume_tokens_exceeds_budget(self):
        """Test consume_tokens with insufficient budget."""
        budget = TokenBudget(
            budget_id="test",
            allocated_tokens=10000,
            consumed_tokens=8000,
            reserved_tokens=1000,
            cost_limit=Decimal('100.00')
        )  # Only 1000 available + 1000 reserved = 2000 max consumable
    
        with pytest.raises(ValueError, match="Cannot consume 3000 tokens - exceeds allocated budget"):
>           budget.consume_tokens(3000, Decimal('30.00'))

tests\unit\contexts\ai\domain\test_common_value_objects.py:1196: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = TokenBudget(budget_id='test', allocated_tokens=10000, consumed_tokens=8000, reserved_tokens=1000, cost_limit=Decimal('..., accumulated_cost=Decimal('0.00'), period_start=None, period_end=None, rollover_enabled=True, priority=5, metadata={})
token_count = 3000, cost = Decimal('30.00')

    def consume_tokens(self, token_count: int, cost: Decimal) -> 'TokenBudget':
        """Create new budget with consumed tokens and cost (immutable operation)."""
        if token_count > (self.consumed_tokens + self.reserved_tokens + self.get_available_tokens()):
            raise ValueError(f"Cannot consume {token_count} tokens - exceeds allocated budget")
    
        if not self.can_afford_cost(cost):
            raise ValueError(f"Cannot afford additional cost of ${cost} - exceeds cost limit")
    
        # Consume from reserved first, then available
        new_reserved = max(0, self.reserved_tokens - token_count)
        tokens_from_available = max(0, token_count - (self.reserved_tokens - new_reserved))
    
>       return TokenBudget(
            budget_id=self.budget_id,
            allocated_tokens=self.allocated_tokens,
            consumed_tokens=self.consumed_tokens + tokens_from_available + (self.reserved_tokens - new_reserved),
            reserved_tokens=new_reserved,
            cost_limit=self.cost_limit,
            accumulated_cost=self.accumulated_cost + cost,
            period_start=self.period_start,
            period_end=self.period_end,
            rollover_enabled=self.rollover_enabled,
            priority=self.priority,
            metadata=self.metadata.copy()
        )

contexts\ai\domain\value_objects\common.py:538: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = TokenBudget(budget_id='test', allocated_tokens=10000, consumed_tokens=11000, reserved_tokens=0, cost_limit=Decimal('10... accumulated_cost=Decimal('30.00'), period_start=None, period_end=None, rollover_enabled=True, priority=5, metadata={})
budget_id = 'test', allocated_tokens = 10000, consumed_tokens = 11000
reserved_tokens = 0, cost_limit = Decimal('100.00')
accumulated_cost = Decimal('30.00'), period_start = None, period_end = None
rollover_enabled = True, priority = 5, metadata = {}

>   ???

<string>:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = TokenBudget(budget_id='test', allocated_tokens=10000, consumed_tokens=11000, reserved_tokens=0, cost_limit=Decimal('10... accumulated_cost=Decimal('30.00'), period_start=None, period_end=None, rollover_enabled=True, priority=5, metadata={})

    def __post_init__(self):
        """Validate TokenBudget business rules and constraints."""
        # Initialize optional fields
        if self.cost_limit is None:
            object.__setattr__(self, 'cost_limit', Decimal('1000.00'))  # $1000 default
    
        if self.accumulated_cost is None:
            object.__setattr__(self, 'accumulated_cost', Decimal('0.00'))
    
        if self.metadata is None:
            object.__setattr__(self, 'metadata', {})
    
        # Validate budget_id
        if not self.budget_id or not isinstance(self.budget_id, str):
            raise ValueError("budget_id is required and must be a string")
    
        if not (3 <= len(self.budget_id) <= 100):
            raise ValueError("budget_id must be 3-100 characters long")
    
        if not re.match(r'^[a-zA-Z0-9\-_\.]+$', self.budget_id):
            raise ValueError("budget_id contains invalid characters")
    
        # Validate token values
        if not isinstance(self.allocated_tokens, int) or self.allocated_tokens <= 0:
            raise ValueError("allocated_tokens must be a positive integer")
    
        if not isinstance(self.consumed_tokens, int) or self.consumed_tokens < 0:
            raise ValueError("consumed_tokens must be a non-negative integer")
    
        if not isinstance(self.reserved_tokens, int) or self.reserved_tokens < 0:
            raise ValueError("reserved_tokens must be a non-negative integer")
    
        # Validate token budget constraints
        if self.consumed_tokens + self.reserved_tokens > self.allocated_tokens:
>           raise ValueError("consumed + reserved tokens cannot exceed allocated tokens")
E           ValueError: consumed + reserved tokens cannot exceed allocated tokens

contexts\ai\domain\value_objects\common.py:441: ValueError

During handling of the above exception, another exception occurred:

self = <tests.unit.contexts.ai.domain.test_common_value_objects.TestTokenBudgetMethods object at 0x0000021FAE416890>

    def test_consume_tokens_exceeds_budget(self):
        """Test consume_tokens with insufficient budget."""
        budget = TokenBudget(
            budget_id="test",
            allocated_tokens=10000,
            consumed_tokens=8000,
            reserved_tokens=1000,
            cost_limit=Decimal('100.00')
        )  # Only 1000 available + 1000 reserved = 2000 max consumable
    
>       with pytest.raises(ValueError, match="Cannot consume 3000 tokens - exceeds allocated budget"):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError: Regex pattern did not match.
E        Regex: 'Cannot consume 3000 tokens - exceeds allocated budget'
E        Input: 'consumed + reserved tokens cannot exceed allocated tokens'

tests\unit\contexts\ai\domain\test_common_value_objects.py:1195: AssertionError
_______________ TestTokenBudgetMethods.test_is_near_exhaustion ________________

self = <tests.unit.contexts.ai.domain.test_common_value_objects.TestTokenBudgetMethods object at 0x0000021FADFC7890>

    def test_is_near_exhaustion(self):
        """Test is_near_exhaustion method."""
        # Not near exhaustion
        budget1 = TokenBudget(
            budget_id="test1",
            allocated_tokens=10000,
            consumed_tokens=5000,  # 50% utilization
            cost_limit=Decimal('100.00'),
            accumulated_cost=Decimal('50.00')  # 50% cost utilization
        )
        assert budget1.is_near_exhaustion() is False
>       assert budget1.is_near_exhaustion(Decimal('60.00')) is True  # Custom threshold
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError: assert False is True
E        +  where False = is_near_exhaustion(Decimal('60.00'))
E        +    where is_near_exhaustion = TokenBudget(budget_id='test1', allocated_tokens=10000, consumed_tokens=5000, reserved_tokens=0, cost_limit=Decimal('100.00'), accumulated_cost=Decimal('50.00'), period_start=None, period_end=None, rollover_enabled=True, priority=5, metadata={}).is_near_exhaustion
E        +    and   Decimal('60.00') = Decimal('60.00')

tests\unit\contexts\ai\domain\test_common_value_objects.py:1255: AssertionError
______________ TestTokenBudgetEquality.test_equality_same_values ______________

self = <tests.unit.contexts.ai.domain.test_common_value_objects.TestTokenBudgetEquality object at 0x0000021FAE406E90>

    def test_equality_same_values(self):
        """Test equality with same values."""
        budget1 = TokenBudget(
            budget_id="test-budget",
            allocated_tokens=10000,
            consumed_tokens=3000,
            reserved_tokens=2000
        )
    
        budget2 = TokenBudget(
            budget_id="test-budget",
            allocated_tokens=10000,
            consumed_tokens=3000,
            reserved_tokens=2000
        )
    
        assert budget1 == budget2
>       assert hash(budget1) == hash(budget2)
               ^^^^^^^^^^^^^

tests\unit\contexts\ai\domain\test_common_value_objects.py:1342: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = TokenBudget(budget_id='test-budget', allocated_tokens=10000, consumed_tokens=3000, reserved_tokens=2000, cost_limit=De..., accumulated_cost=Decimal('0.00'), period_start=None, period_end=None, rollover_enabled=True, priority=5, metadata={})

>   ???
E   TypeError: unhashable type: 'dict'

<string>:33: TypeError
__________ TestTokenBudgetEquality.test_inequality_different_values ___________

self = <tests.unit.contexts.ai.domain.test_common_value_objects.TestTokenBudgetEquality object at 0x0000021FAE406FD0>

    def test_inequality_different_values(self):
        """Test inequality with different values."""
        budget1 = TokenBudget(
            budget_id="test-budget-1",
            allocated_tokens=10000
        )
    
        budget2 = TokenBudget(
            budget_id="test-budget-2",
            allocated_tokens=10000
        )
    
        assert budget1 != budget2
>       assert hash(budget1) != hash(budget2)
               ^^^^^^^^^^^^^

tests\unit\contexts\ai\domain\test_common_value_objects.py:1357: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = TokenBudget(budget_id='test-budget-1', allocated_tokens=10000, consumed_tokens=0, reserved_tokens=0, cost_limit=Decima..., accumulated_cost=Decimal('0.00'), period_start=None, period_end=None, rollover_enabled=True, priority=5, metadata={})

>   ???
E   TypeError: unhashable type: 'dict'

<string>:33: TypeError
____________ TestTokenBudgetEquality.test_equality_in_collections _____________

self = <tests.unit.contexts.ai.domain.test_common_value_objects.TestTokenBudgetEquality object at 0x0000021FAE474510>

    def test_equality_in_collections(self):
        """Test that equality works correctly in collections."""
        budget1 = TokenBudget(
            budget_id="collection-test",
            allocated_tokens=10000
        )
    
        budget2 = TokenBudget(
            budget_id="collection-test",
            allocated_tokens=10000
        )
    
>       budget_set = {budget1}
                     ^^^^^^^^^

tests\unit\contexts\ai\domain\test_common_value_objects.py:1371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = TokenBudget(budget_id='collection-test', allocated_tokens=10000, consumed_tokens=0, reserved_tokens=0, cost_limit=Deci..., accumulated_cost=Decimal('0.00'), period_start=None, period_end=None, rollover_enabled=True, priority=5, metadata={})

>   ???
E   TypeError: unhashable type: 'dict'

<string>:33: TypeError
============================== warnings summary ===============================
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceStreamingExecution::test_execute_stream_async_successful
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceStreamingExecution::test_execute_stream_async_provider_exception
tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceStreamingExecution::test_execute_stream_async_rate_limiting_disabled
  D:\Code\Novel-Engine\contexts\ai\application\services\execute_llm_service.py:494: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    async for chunk in provider.generate_stream_async(request, budget):
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
FAILED tests/unit/contexts/subjective/application/test_subjective_application_service.py::TestAwarenessOperations::test_update_awareness_state_success
FAILED tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestPerceptionBonus::test_task_focused_penalty
FAILED tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestReactionTimeModifier::test_unconscious_no_reaction
FAILED tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestReactionTimeModifier::test_sleeping_very_slow_reaction
FAILED tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestReactionTimeModifier::test_vigilant_fast_reaction
FAILED tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestComplexScenarios::test_exhausted_guard_scenario
FAILED tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestComplexScenarios::test_enhanced_sentinel_scenario
FAILED tests/unit/contexts/subjective/domain/test_awareness_value_object.py::TestEdgeCases::test_empty_string_focus_target
FAILED tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseQuerying::test_has_knowledge_about_with_sufficient_certainty
FAILED tests/unit/contexts/subjective/domain/test_knowledge_level_value_object.py::TestKnowledgeBaseQuerying::test_has_knowledge_about_insufficient_certainty
FAILED tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestVisibilityCalculation::test_visibility_within_range_perfect_conditions
FAILED tests/unit/contexts/subjective/domain/test_perception_range_value_object.py::TestPerceptionCapabilitiesBusinessLogic::test_get_maximum_range_empty_ranges
FAILED tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdFactoryMethods::test_from_string_invalid_format
FAILED tests/unit/contexts/subjective/domain/test_subjective_id_value_object.py::TestSubjectiveIdFactoryMethods::test_from_string_non_string_type
FAILED tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceExecution::test_execute_async_cache_hit
FAILED tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceStreamingExecution::test_execute_stream_async_successful
FAILED tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceStreamingExecution::test_execute_stream_async_provider_exception
FAILED tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceStreamingExecution::test_execute_stream_async_rate_limiting_disabled
FAILED tests/unit/contexts/ai/application/test_execute_llm_service.py::TestExecuteLLMServiceStatisticsAndMetrics::test_record_cached_usage
FAILED tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_get_available_tokens_negative_protected
FAILED tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_consume_tokens_exceeds_budget
FAILED tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetMethods::test_is_near_exhaustion
FAILED tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetEquality::test_equality_same_values
FAILED tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetEquality::test_inequality_different_values
FAILED tests/unit/contexts/ai/domain/test_common_value_objects.py::TestTokenBudgetEquality::test_equality_in_collections
================= 25 failed, 421 passed, 3 warnings in 4.83s ==================
