# Environment-specific configurations
# =====================================

# Base configuration shared across all environments
base: &base
  logging:
    level: INFO
    format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  
  api:
    host: "0.0.0.0"
    port: 8000
    workers: 4
    timeout: 30
    
  simulation:
    turns: 10
    max_agents: 20
    api_timeout: 60
  
  security:
    enable_security_headers: true
    enable_input_validation: true
    enable_rate_limiting: true
    cors_origins:
      - "http://localhost:3000"
      - "http://localhost:3001"
  
  performance:
    enable_caching: true
    max_memory_mb: 1024
    enable_monitoring: false

# Development environment
development:
  <<: *base
  
  state_store:
    redis_url: "redis://localhost:6379/0"
    postgres_url: "postgresql://postgres:password@localhost:5432/novelengine_dev"
    s3_bucket: "novel-engine-dev"
    s3_region: "us-east-1"
    cache_ttl: 300  # 5 minutes
    max_retries: 3
    connection_timeout: 30
  
  logging:
    level: DEBUG
    
  security:
    enable_security_headers: false
    force_https: false
    cors_origins:
      - "http://localhost:3000"
      - "http://localhost:3001"
      - "http://127.0.0.1:3000"
  
  features:
    ai_enhanced_narratives: true
    advanced_world_state: true
    realtime_updates: true
    
  performance:
    enable_monitoring: true

# Testing environment
testing:
  <<: *base
  
  state_store:
    redis_url: "redis://localhost:6379/1"  # Different DB for tests
    postgres_url: "postgresql://postgres:password@localhost:5432/novelengine_test"
    s3_bucket: "novel-engine-test"
    s3_region: "us-east-1"
    cache_ttl: 60  # 1 minute
    max_retries: 1
    connection_timeout: 10
  
  logging:
    level: WARNING
    
  api:
    port: 8001  # Different port for tests
    workers: 1
    
  simulation:
    turns: 3  # Shorter simulations for tests
    max_agents: 5
    api_timeout: 10
    
  features:
    ai_enhanced_narratives: false  # Disable AI for faster tests
    
  performance:
    enable_caching: false
    max_memory_mb: 256

# Staging environment  
staging:
  <<: *base
  
  state_store:
    redis_url: "${REDIS_URL}"
    postgres_url: "${POSTGRES_URL}"
    s3_bucket: "${S3_BUCKET}"
    s3_region: "${S3_REGION}"
    aws_access_key: "${AWS_ACCESS_KEY_ID}"
    aws_secret_key: "${AWS_SECRET_ACCESS_KEY}"
    cache_ttl: 1800  # 30 minutes
    max_retries: 5
    connection_timeout: 30
  
  logging:
    level: INFO
    
  api:
    port: "${API_PORT}"
    workers: 2
    
  security:
    encryption_key: "${ENCRYPTION_KEY}"
    jwt_secret: "${JWT_SECRET}"
    enable_security_headers: true
    force_https: true
    cors_origins:
      - "https://staging.novel-engine.com"
  
  features:
    ai_enhanced_narratives: true
    advanced_world_state: true
    multiplayer_support: true
    realtime_updates: true
    
  performance:
    enable_monitoring: true
    max_memory_mb: 2048

# Production environment
production:
  <<: *base
  
  state_store:
    redis_url: "${REDIS_URL}"
    postgres_url: "${POSTGRES_URL}"
    s3_bucket: "${S3_BUCKET}"
    s3_region: "${S3_REGION}"
    aws_access_key: "${AWS_ACCESS_KEY_ID}"
    aws_secret_key: "${AWS_SECRET_ACCESS_KEY}"
    cache_ttl: 3600  # 1 hour
    max_retries: 5
    connection_timeout: 30
    encryption_key: "${ENCRYPTION_KEY}"
  
  logging:
    level: WARNING
    
  api:
    port: "${API_PORT}"
    workers: "${API_WORKERS}"
    timeout: 60
    
  simulation:
    turns: "${SIMULATION_TURNS}"
    max_agents: "${MAX_AGENTS}"
    api_timeout: 120
    
  security:
    encryption_key: "${ENCRYPTION_KEY}"
    jwt_secret: "${JWT_SECRET}"
    enable_security_headers: true
    force_https: true
    enable_audit_logging: true
    enable_database_encryption: true
    session_timeout_minutes: 30
    max_upload_size_mb: 50
    cors_origins:
      - "https://novel-engine.com"
      - "https://www.novel-engine.com"
  
  features:
    ai_enhanced_narratives: true
    advanced_world_state: true
    multiplayer_support: true
    realtime_updates: true
    
  performance:
    enable_monitoring: true
    enable_performance_monitoring: true
    max_memory_mb: 4096
    
  production:
    disable_debug_features: true
    disable_api_docs: true
    enable_comprehensive_logging: true
    enable_performance_monitoring: true
    enable_health_checks: true
    enable_graceful_shutdown: true

# Kubernetes/Cloud environment
kubernetes:
  <<: *base
  
  state_store:
    # Use Kubernetes service discovery
    redis_url: "redis://redis-service:6379/0"
    postgres_url: "postgresql://postgres:${POSTGRES_PASSWORD}@postgres-service:5432/novelengine"
    s3_bucket: "${S3_BUCKET}"
    s3_region: "${S3_REGION}"
    aws_access_key: "${AWS_ACCESS_KEY_ID}"
    aws_secret_key: "${AWS_SECRET_ACCESS_KEY}"
    cache_ttl: 3600
    max_retries: 10  # Higher retries for network issues
    connection_timeout: 45
  
  logging:
    level: "${LOG_LEVEL}"
    format: "%(asctime)s - %(name)s - %(levelname)s - [%(request_id)s] - %(message)s"
    
  api:
    host: "0.0.0.0"
    port: 8000
    workers: "${API_WORKERS}"
    timeout: 120
    
  security:
    encryption_key: "${ENCRYPTION_KEY}"
    jwt_secret: "${JWT_SECRET}"
    enable_security_headers: true
    force_https: true
    enable_audit_logging: true
    cors_origins: "${CORS_ORIGINS}"  # Comma-separated list
  
  features:
    ai_enhanced_narratives: true
    advanced_world_state: true
    multiplayer_support: true
    realtime_updates: true
    
  performance:
    enable_monitoring: true
    enable_performance_monitoring: true
    max_memory_mb: "${MAX_MEMORY_MB}"
    
  # Kubernetes-specific configurations
  kubernetes:
    service_mesh: istio
    metrics_endpoint: "/metrics"
    health_endpoint: "/health"
    ready_endpoint: "/ready"
    liveness_endpoint: "/liveness"
    
    # Resource limits and requests
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "2Gi"
        cpu: "1000m"
    
    # Horizontal Pod Autoscaler
    hpa:
      min_replicas: 3
      max_replicas: 20
      cpu_target: 70
      memory_target: 80
    
    # Pod disruption budget
    pdb:
      min_available: 2
    
    # Network policies
    network_policies:
      allow_ingress: true
      allow_egress: true
      allowed_namespaces:
        - "novel-engine"
        - "monitoring"
        - "logging"