"""
Nginx Configuration Module

Manages Nginx reverse proxy, load balancing, and web server configurations
for the Novel Engine application deployment.

Features:
- Reverse proxy configuration
- Load balancing strategies
- SSL/TLS termination
- Static file serving
- Security headers and rate limiting
- Upstream server management

Example:
    from configs.nginx import generate_nginx_config, load_upstream_config
    
    nginx_conf = generate_nginx_config('production')
    upstream_servers = load_upstream_config()
"""

from typing import Dict, Any, List, Optional
from pathlib import Path

__version__ = "1.0.0"

# Nginx configuration utilities
__all__ = [
    "generate_nginx_config",
    "load_upstream_config",
    "get_ssl_config",
    "validate_nginx_config",
    "get_security_headers"
]

def generate_nginx_config(env: str = 'production') -> str:
    """
    Generate Nginx configuration for the specified environment.
    
    Args:
        env: Environment name (dev, staging, production)
        
    Returns:
        str: Generated Nginx configuration
    """
    # Placeholder for actual Nginx configuration generation
    # Will be implemented during migration
    return f"""
# Nginx configuration for {env} environment
# Generated by Novel Engine configuration system

upstream novel_engine {{
    server 127.0.0.1:8000;
    server 127.0.0.1:8001 backup;
}}

server {{
    listen 80;
    listen 443 ssl http2;
    server_name novel-engine.local;
    
    # SSL configuration will be added here
    
    location / {{
        proxy_pass http://novel_engine;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }}
}}
"""

def load_upstream_config() -> List[Dict[str, Any]]:
    """
    Load upstream server configuration.
    
    Returns:
        List of upstream server configurations
    """
    return [
        {
            'host': '127.0.0.1',
            'port': 8000,
            'weight': 1,
            'max_fails': 3,
            'fail_timeout': '30s'
        },
        {
            'host': '127.0.0.1', 
            'port': 8001,
            'weight': 1,
            'backup': True
        }
    ]

def get_ssl_config() -> Dict[str, str]:
    """
    Get SSL/TLS configuration settings.
    
    Returns:
        Dict containing SSL configuration
    """
    return {
        'ssl_certificate': '/etc/ssl/certs/novel-engine.crt',
        'ssl_certificate_key': '/etc/ssl/private/novel-engine.key',
        'ssl_protocols': 'TLSv1.2 TLSv1.3',
        'ssl_ciphers': 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384'
    }

def validate_nginx_config(config: str) -> bool:
    """
    Validate Nginx configuration syntax.
    
    Args:
        config: Nginx configuration string
        
    Returns:
        bool: True if configuration is valid
    """
    # Basic validation - checks for required sections
    required_sections = ['server {', 'location /']
    return all(section in config for section in required_sections)

def get_security_headers() -> Dict[str, str]:
    """
    Get security headers configuration.
    
    Returns:
        Dict containing security headers
    """
    return {
        'X-Content-Type-Options': 'nosniff',
        'X-Frame-Options': 'DENY',
        'X-XSS-Protection': '1; mode=block',
        'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',
        'Content-Security-Policy': "default-src 'self'"
    }