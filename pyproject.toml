[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "novel-engine"
description = "AI-Enhanced Interactive Novel Engine"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {name = "Novel Engine Team"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "aiosqlite>=0.17.0",
    "jinja2>=3.0.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pyyaml>=6.0.0",
    "fastapi>=0.116.1",
    "pydantic>=2.11.7",
    "uvicorn>=0.35.0",
    "httpx>=0.28.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "coverage[toml]>=7.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-cov>=4.0.0",
    "coverage[toml]>=7.0.0",
    "httpx>=0.28.1",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=8.0.0",
    "mkdocstrings[python]>=0.19.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*", "ai_testing*", "frontend*", "docs*", "logs*", "build*", "dist*"]

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
src_paths = ["src", "tests"]

# MyPy type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
follow_imports = "skip"
files = [
    "contexts/orchestration/domain/value_objects/turn_configuration.py",
    "contexts/orchestration/domain/entities/turn.py",
    "contexts/orchestration/application/services/turn_orchestrator.py",
]

[[tool.mypy.overrides]]
module = [
    "aiosqlite.*",
    "jinja2.*",
    "yaml.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "*/templates/*",
    "*/static/*",
    "setup.py",
    "demo_*.py",
    "example_*.py",
    "*_demo.py",
    "fix_*.py",
    "run_*.py",
    "simple_*.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
title = "Novel Engine Test Coverage"

[tool.coverage.xml]
output = "coverage.xml"

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests", "src"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--verbose",
    "--tb=short", 
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=90",
    "--durations=10",
    "--maxfail=10",
]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests between components",
    "system: Full system end-to-end tests",
    "e2e: End-to-end workflow tests",
    "api: API endpoint tests",
    "character: Character system tests",
    "story: Story generation tests",
    "narrative: Narrative and content tests",
    "performance: Performance and load tests",
    "security: Security and validation tests",
    "slow: Tests that take significant time to run",
    "requires_services: Tests requiring external services to be running",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:pydantic.*",
]
asyncio_mode = "auto"

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]
