# Kubernetes Secrets
# ==================
# NOTE: In production, these should be created using external secret management
# systems like HashiCorp Vault, AWS Secrets Manager, or Azure Key Vault

apiVersion: v1
kind: Secret
metadata:
  name: novel-engine-secrets
  namespace: novel-engine
  labels:
    app: novel-engine
    component: secrets
type: Opaque
stringData:
  # Database credentials
  postgres_username: "novel_engine_app"
  postgres_password: "CHANGE_THIS_IN_PRODUCTION"
  postgres_url: "postgresql://novel_engine_app:CHANGE_THIS_IN_PRODUCTION@postgres-service:5432/novelengine"
  
  # Redis credentials
  redis_password: "CHANGE_THIS_IN_PRODUCTION" 
  redis_url: "redis://:CHANGE_THIS_IN_PRODUCTION@redis-service:6379/0"
  
  # Application secrets
  encryption_key: "CHANGE_THIS_32_CHAR_ENCRYPTION_KEY"
  jwt_secret: "CHANGE_THIS_JWT_SECRET_KEY_FOR_AUTHENTICATION"
  
  # AWS credentials for S3
  aws_access_key_id: "YOUR_AWS_ACCESS_KEY_ID"
  aws_secret_access_key: "YOUR_AWS_SECRET_ACCESS_KEY"
  s3_bucket: "novel-engine-production"
  s3_region: "us-east-1"
  
  # LLM API keys
  openai_api_key: "YOUR_OPENAI_API_KEY"
  anthropic_api_key: "YOUR_ANTHROPIC_API_KEY"
  google_api_key: "YOUR_GOOGLE_API_KEY"
  
  # Monitoring and observability
  jaeger_endpoint: "http://jaeger-collector:14268/api/traces"
  prometheus_pushgateway: "http://prometheus-pushgateway:9091"

---

apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: novel-engine
  labels:
    app: postgres
    component: secrets
type: Opaque
stringData:
  postgres_user: "postgres"
  postgres_password: "CHANGE_THIS_POSTGRES_ADMIN_PASSWORD"
  postgres_db: "novelengine"

---

apiVersion: v1
kind: Secret
metadata:
  name: redis-secrets
  namespace: novel-engine
  labels:
    app: redis
    component: secrets
type: Opaque
stringData:
  redis_password: "CHANGE_THIS_REDIS_PASSWORD"

---

# TLS Certificate Secret (replace with cert-manager or external certificate)
apiVersion: v1
kind: Secret
metadata:
  name: novel-engine-tls
  namespace: novel-engine
  labels:
    app: novel-engine
    component: tls
type: kubernetes.io/tls
data:
  # Base64 encoded certificate and key
  # In production, use cert-manager with Let's Encrypt or your CA
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi4uLiBZT1VSIENFUlRJRklDQVRFIERBVEEgSEVSRSAuLi4KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCi4uLiBZT1VSIFBSSVZBVEUgS0VZIERBVEEgSEVSRSAuLi4KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ==

---

# Docker registry secret (if using private registry)
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  namespace: novel-engine
  labels:
    app: novel-engine
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ewoJImF1dGhzIjogewoJCSJyZWdpc3RyeS5leGFtcGxlLmNvbSI6IHsKCQkJImF1dGgiOiAiWVc1aWJEcG9hWE0wTUVCa2IyNTBjbVUiLAoJCQkiZW1haWwiOiAiZXhhbXBsZUBleGFtcGxlLmNvbSIKCQl9Cgl9Cn0=

---

# Service Monitor Secret for Prometheus (if needed)
apiVersion: v1
kind: Secret
metadata:
  name: prometheus-auth
  namespace: novel-engine
  labels:
    app: monitoring
    component: prometheus
type: Opaque
stringData:
  username: "prometheus"
  password: "CHANGE_THIS_PROMETHEUS_PASSWORD"