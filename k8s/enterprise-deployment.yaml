apiVersion: v1
kind: Namespace
metadata:
  name: novel-engine-enterprise
  labels:
    name: novel-engine-enterprise
    tier: production
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: novel-engine-enterprise
  namespace: novel-engine-enterprise
  labels:
    app: novel-engine
    tier: enterprise
    version: v2.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: novel-engine
      tier: enterprise
  template:
    metadata:
      labels:
        app: novel-engine
        tier: enterprise
        version: v2.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8002"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: novel-engine-enterprise
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: novel-engine-enterprise
        image: ghcr.io/your-org/novel-engine:enterprise-latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 8001
          name: coordination
          protocol: TCP
        - containerPort: 8002
          name: monitoring
          protocol: TCP
        env:
        - name: NOVEL_ENGINE_ENV
          value: "enterprise"
        - name: ENABLE_MULTI_AGENT
          value: "true"
        - name: ENABLE_ENTERPRISE_MONITORING
          value: "true"
        - name: MAX_AGENTS
          value: "20"
        - name: AGENT_COORDINATION_WORKERS
          value: "4"
        - name: EMERGENT_NARRATIVE_ENABLED
          value: "true"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: novel-engine-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: novel-engine-secrets
              key: redis-url
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: novel-engine-secrets
              key: rabbitmq-url
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: novel-engine-secrets
              key: gemini-api-key
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 15
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /startup
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 10
        volumeMounts:
        - name: app-config
          mountPath: /app/config
          readOnly: true
        - name: enterprise-data
          mountPath: /app/data
        - name: enterprise-logs
          mountPath: /app/logs
        - name: enterprise-reports
          mountPath: /app/reports
      volumes:
      - name: app-config
        configMap:
          name: novel-engine-config
      - name: enterprise-data
        persistentVolumeClaim:
          claimName: novel-engine-data
      - name: enterprise-logs
        persistentVolumeClaim:
          claimName: novel-engine-logs
      - name: enterprise-reports
        persistentVolumeClaim:
          claimName: novel-engine-reports
      nodeSelector:
        kubernetes.io/os: linux
        node-type: compute-optimized
      tolerations:
      - key: "compute-optimized"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - novel-engine
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: novel-engine-service
  namespace: novel-engine-enterprise
  labels:
    app: novel-engine
    tier: enterprise
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  selector:
    app: novel-engine
    tier: enterprise
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  - name: coordination
    port: 8001
    targetPort: 8001
    protocol: TCP
  - name: monitoring
    port: 8002
    targetPort: 8002
    protocol: TCP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: novel-engine-enterprise
  namespace: novel-engine-enterprise
  labels:
    app: novel-engine
    tier: enterprise
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: novel-engine-enterprise
  name: novel-engine-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: novel-engine-rolebinding
  namespace: novel-engine-enterprise
subjects:
- kind: ServiceAccount
  name: novel-engine-enterprise
  namespace: novel-engine-enterprise
roleRef:
  kind: Role
  name: novel-engine-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: novel-engine-data
  namespace: novel-engine-enterprise
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp3
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: novel-engine-logs
  namespace: novel-engine-enterprise
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp3
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: novel-engine-reports
  namespace: novel-engine-enterprise
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp3
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: novel-engine-config
  namespace: novel-engine-enterprise
data:
  enterprise.yaml: |
    # Enterprise Multi-Agent Configuration
    novel_engine:
      mode: enterprise
      enable_multi_agent: true
      max_agents: 20
      coordination_workers: 4
      
    multi_agent:
      enable_parallel_processing: true
      enable_emergent_narrative: true
      enable_relationship_tracking: true
      coordination_timeout: 30
      
    enterprise:
      enable_monitoring: true
      enable_optimization: true
      enable_dashboards: true
      health_check_interval: 30
      metrics_collection_interval: 10
      
    performance:
      worker_processes: 4
      max_connections: 1000
      connection_timeout: 30
      keep_alive_timeout: 5
      
    logging:
      level: INFO
      format: structured
      destination: stdout
      correlation_id: true
---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: novel-engine-hpa
  namespace: novel-engine-enterprise
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: novel-engine-enterprise
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30
---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: novel-engine-network-policy
  namespace: novel-engine-enterprise
spec:
  podSelector:
    matchLabels:
      app: novel-engine
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: novel-engine
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 8001
    - protocol: TCP
      port: 8002
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - namespaceSelector:
        matchLabels:
          name: redis
    ports:
    - protocol: TCP
      port: 6379