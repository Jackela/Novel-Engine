# Comprehensive Monitoring and Observability Stack
# ================================================

# Prometheus ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
  labels:
    app: prometheus
    component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: novel-engine-prod
        environment: production
    
    rule_files:
    - "/etc/prometheus/rules/*.yml"
    
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093
    
    scrape_configs:
    # Kubernetes API server
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
    
    # Kubernetes nodes
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics
    
    # Kubernetes pods
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
    
    # Novel Engine API
    - job_name: 'novel-engine-api'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - novel-engine
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app, __meta_kubernetes_pod_label_component]
        action: keep
        regex: novel-engine;api
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
      scrape_interval: 10s
      metrics_path: /metrics
    
    # PostgreSQL
    - job_name: 'postgres-exporter'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - novel-engine
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app, __meta_kubernetes_pod_label_component]
        action: keep
        regex: postgres;database
      - source_labels: [__meta_kubernetes_pod_container_port_number]
        action: keep
        regex: 9187
    
    # Redis
    - job_name: 'redis-exporter'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - novel-engine
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app, __meta_kubernetes_pod_label_component]
        action: keep
        regex: redis;cache
      - source_labels: [__meta_kubernetes_pod_container_port_number]
        action: keep
        regex: 9121
    
    # Nginx Ingress
    - job_name: 'nginx-ingress'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - ingress-nginx
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
        action: keep
        regex: ingress-nginx
      - source_labels: [__meta_kubernetes_pod_container_port_number]
        action: keep
        regex: 10254
    
    # Node Exporter
    - job_name: 'node-exporter'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - monitoring
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: node-exporter
    
    # Blackbox Exporter for external monitoring
    - job_name: 'blackbox-http'
      metrics_path: /probe
      params:
        module: [http_2xx]
      static_configs:
      - targets:
        - https://app.novelengine.com
        - https://api.novelengine.com/health
        - https://ws.novelengine.com/health
      relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox-exporter:9115
    
    # Custom application metrics
    - job_name: 'novel-engine-custom'
      scrape_interval: 5s
      kubernetes_sd_configs:
      - role: service
        namespaces:
          names:
          - novel-engine
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name

---

# Prometheus Alerting Rules
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: monitoring
  labels:
    app: prometheus
    component: rules
data:
  novel-engine.yml: |
    groups:
    - name: novel-engine-alerts
      rules:
      # High-level application alerts
      - alert: NovelEngineAPIDown
        expr: up{job="novel-engine-api"} == 0
        for: 1m
        labels:
          severity: critical
          service: api
        annotations:
          summary: "Novel Engine API is down"
          description: "Novel Engine API has been down for more than 1 minute."
      
      - alert: NovelEngineHighLatency
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job="novel-engine-api"}[5m])) > 1
        for: 2m
        labels:
          severity: warning
          service: api
        annotations:
          summary: "High API latency detected"
          description: "95th percentile latency is {{ $value }}s"
      
      - alert: NovelEngineHighErrorRate
        expr: rate(http_requests_total{job="novel-engine-api",status=~"5.."}[5m]) / rate(http_requests_total{job="novel-engine-api"}[5m]) > 0.05
        for: 2m
        labels:
          severity: warning
          service: api
        annotations:
          summary: "High error rate detected"
          description: "Error rate is {{ $value | humanizePercentage }}"
      
      - alert: NovelEngineHighCPUUsage
        expr: rate(container_cpu_usage_seconds_total{namespace="novel-engine",pod=~"novel-engine-api-.*"}[5m]) > 0.8
        for: 5m
        labels:
          severity: warning
          service: api
        annotations:
          summary: "High CPU usage"
          description: "CPU usage is {{ $value | humanizePercentage }}"
      
      - alert: NovelEngineHighMemoryUsage
        expr: container_memory_usage_bytes{namespace="novel-engine",pod=~"novel-engine-api-.*"} / container_spec_memory_limit_bytes > 0.9
        for: 5m
        labels:
          severity: warning
          service: api
        annotations:
          summary: "High memory usage"
          description: "Memory usage is {{ $value | humanizePercentage }}"
      
      # Database alerts
      - alert: PostgreSQLDown
        expr: up{job="postgres-exporter"} == 0
        for: 1m
        labels:
          severity: critical
          service: database
        annotations:
          summary: "PostgreSQL is down"
          description: "PostgreSQL has been down for more than 1 minute."
      
      - alert: PostgreSQLHighConnections
        expr: pg_stat_database_numbackends / pg_settings_max_connections > 0.8
        for: 5m
        labels:
          severity: warning
          service: database
        annotations:
          summary: "PostgreSQL high connections"
          description: "PostgreSQL connection usage is {{ $value | humanizePercentage }}"
      
      # Redis alerts
      - alert: RedisDown
        expr: up{job="redis-exporter"} == 0
        for: 1m
        labels:
          severity: critical
          service: cache
        annotations:
          summary: "Redis is down"
          description: "Redis has been down for more than 1 minute."
      
      - alert: RedisHighMemoryUsage
        expr: redis_memory_used_bytes / redis_memory_max_bytes > 0.9
        for: 5m
        labels:
          severity: warning
          service: cache
        annotations:
          summary: "Redis high memory usage"
          description: "Redis memory usage is {{ $value | humanizePercentage }}"
    
    - name: infrastructure-alerts
      rules:
      # Node alerts
      - alert: NodeDown
        expr: up{job="kubernetes-nodes"} == 0
        for: 1m
        labels:
          severity: critical
          service: infrastructure
        annotations:
          summary: "Node is down"
          description: "Node {{ $labels.instance }} has been down for more than 1 minute."
      
      - alert: NodeHighCPU
        expr: (1 - avg by (instance) (irate(node_cpu_seconds_total{mode="idle"}[5m]))) > 0.8
        for: 5m
        labels:
          severity: warning
          service: infrastructure
        annotations:
          summary: "High CPU usage on node"
          description: "Node {{ $labels.instance }} CPU usage is {{ $value | humanizePercentage }}"
      
      - alert: NodeHighMemory
        expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes > 0.9
        for: 5m
        labels:
          severity: warning
          service: infrastructure
        annotations:
          summary: "High memory usage on node"
          description: "Node {{ $labels.instance }} memory usage is {{ $value | humanizePercentage }}"
      
      - alert: NodeDiskSpaceLow
        expr: (node_filesystem_size_bytes - node_filesystem_free_bytes) / node_filesystem_size_bytes > 0.85
        for: 5m
        labels:
          severity: warning
          service: infrastructure
        annotations:
          summary: "Low disk space on node"
          description: "Node {{ $labels.instance }} disk usage is {{ $value | humanizePercentage }}"
      
      # Security alerts
      - alert: SecurityThreatDetected
        expr: increase(novel_engine_security_threats_total[5m]) > 0
        for: 0s
        labels:
          severity: critical
          service: security
        annotations:
          summary: "Security threat detected"
          description: "{{ $value }} security threats detected in the last 5 minutes"
      
      - alert: HighFailedLoginAttempts
        expr: increase(novel_engine_auth_failed_attempts_total[5m]) > 10
        for: 1m
        labels:
          severity: warning
          service: security
        annotations:
          summary: "High number of failed login attempts"
          description: "{{ $value }} failed login attempts in the last 5 minutes"
    
    - name: business-alerts
      rules:
      # Business logic alerts
      - alert: LowNarrativeGenerationRate
        expr: rate(novel_engine_narratives_generated_total[10m]) < 0.1
        for: 10m
        labels:
          severity: warning
          service: application
        annotations:
          summary: "Low narrative generation rate"
          description: "Narrative generation rate is {{ $value }} per second"
      
      - alert: HighAgentErrorRate
        expr: rate(novel_engine_agent_errors_total[5m]) > 0.1
        for: 5m
        labels:
          severity: warning
          service: application
        annotations:
          summary: "High agent error rate"
          description: "Agent error rate is {{ $value }} errors per second"
      
      - alert: WebSocketConnectionsDrop
        expr: novel_engine_websocket_connections < 10 and novel_engine_websocket_connections offset 5m > 50
        for: 2m
        labels:
          severity: warning
          service: websocket
        annotations:
          summary: "Significant drop in WebSocket connections"
          description: "WebSocket connections dropped from {{ $value }} to {{ $value }}"

---

# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus/'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=30d'
        - '--storage.tsdb.retention.size=50GB'
        - '--web.enable-lifecycle'
        - '--web.route-prefix=/'
        - '--web.external-url=https://monitoring.novelengine.com/prometheus'
        ports:
        - containerPort: 9090
        resources:
          requests:
            cpu: 200m
            memory: 1Gi
          limits:
            cpu: 1000m
            memory: 4Gi
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: rules
          mountPath: /etc/prometheus/rules
        - name: storage
          mountPath: /prometheus
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 10
          timeoutSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: prometheus-config
      - name: rules
        configMap:
          name: prometheus-rules
      - name: storage
        persistentVolumeClaim:
          claimName: prometheus-storage

---

# Grafana Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
  labels:
    app: grafana
    component: monitoring
data:
  grafana.ini: |
    [server]
    root_url = https://monitoring.novelengine.com/grafana
    serve_from_sub_path = true
    
    [security]
    admin_user = admin
    admin_password = $__file{/etc/grafana/secrets/admin_password}
    secret_key = $__file{/etc/grafana/secrets/secret_key}
    disable_gravatar = true
    cookie_secure = true
    cookie_samesite = strict
    
    [users]
    allow_sign_up = false
    auto_assign_org_role = Viewer
    
    [auth]
    disable_login_form = false
    disable_signout_menu = false
    
    [auth.anonymous]
    enabled = false
    
    [log]
    level = info
    
    [database]
    type = postgres
    host = postgres-service:5432
    name = grafana
    user = grafana
    password = $__file{/etc/grafana/secrets/db_password}
    ssl_mode = require
    
    [smtp]
    enabled = true
    host = smtp.example.com:587
    user = alerts@novelengine.com
    password = $__file{/etc/grafana/secrets/smtp_password}
    from_address = alerts@novelengine.com
    from_name = Novel Engine Monitoring
    
    [alerting]
    enabled = true
    execute_alerts = true
    
    [unified_alerting]
    enabled = true
    ha_peers = ""
    ha_listen_address = "0.0.0.0:9094"
    ha_advertise_address = ""
    
    [feature_toggles]
    enable = ngalert
  
  datasources.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      editable: true
    - name: Loki
      type: loki
      access: proxy
      url: http://loki:3100
      editable: true
    - name: Jaeger
      type: jaeger
      access: proxy
      url: http://jaeger-query:16686
      editable: true
  
  dashboards.yml: |
    apiVersion: 1
    providers:
    - name: 'novel-engine'
      orgId: 1
      folder: 'Novel Engine'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      options:
        path: /var/lib/grafana/dashboards

---

# Grafana Dashboard ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
  labels:
    app: grafana
    component: dashboards
data:
  novel-engine-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Novel Engine Overview",
        "tags": ["novel-engine", "overview"],
        "timezone": "UTC",
        "panels": [
          {
            "id": 1,
            "title": "API Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{job=\"novel-engine-api\"}[5m])",
                "legendFormat": "{{method}} {{status}}"
              }
            ],
            "yAxes": [
              {
                "label": "Requests/sec"
              }
            ]
          },
          {
            "id": 2,
            "title": "Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job=\"novel-engine-api\"}[5m]))",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.50, rate(http_request_duration_seconds_bucket{job=\"novel-engine-api\"}[5m]))",
                "legendFormat": "50th percentile"
              }
            ]
          }
        ],
        "time": {
          "from": "now-6h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }

---

# AlertManager Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: monitoring
  labels:
    app: alertmanager
    component: monitoring
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'smtp.example.com:587'
      smtp_from: 'alerts@novelengine.com'
      smtp_auth_username: 'alerts@novelengine.com'
      smtp_auth_password: 'smtp_password'
    
    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'web.hook'
      routes:
      - match:
          severity: critical
        receiver: 'critical-alerts'
        group_wait: 5s
        repeat_interval: 5m
      - match:
          service: security
        receiver: 'security-alerts'
        group_wait: 0s
        repeat_interval: 1m
    
    receivers:
    - name: 'web.hook'
      webhook_configs:
      - url: 'http://novel-engine-api-service:8000/api/alerts/webhook'
        send_resolved: true
    
    - name: 'critical-alerts'
      email_configs:
      - to: 'ops-team@novelengine.com'
        subject: 'CRITICAL: {{ .GroupLabels.alertname }}'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Severity: {{ .Labels.severity }}
          Service: {{ .Labels.service }}
          {{ end }}
      slack_configs:
      - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
        channel: '#alerts-critical'
        title: 'Critical Alert: {{ .GroupLabels.alertname }}'
        text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
    
    - name: 'security-alerts'
      email_configs:
      - to: 'security@novelengine.com'
        subject: 'SECURITY ALERT: {{ .GroupLabels.alertname }}'
        body: |
          SECURITY INCIDENT DETECTED
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Severity: {{ .Labels.severity }}
          Time: {{ .StartsAt }}
          {{ end }}
      slack_configs:
      - api_url: 'https://hooks.slack.com/services/YOUR/SECURITY/WEBHOOK'
        channel: '#security-alerts'
        title: 'Security Alert: {{ .GroupLabels.alertname }}'
        text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
        color: 'danger'
    
    inhibit_rules:
    - source_match:
        severity: 'critical'
      target_match:
        severity: 'warning'
      equal: ['alertname', 'cluster', 'service']