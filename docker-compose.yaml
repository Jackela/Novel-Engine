version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: novel-engine-postgres
    environment:
      POSTGRES_DB: novel_engine
      POSTGRES_USER: novel_engine
      POSTGRES_PASSWORD: novel_engine_dev_password
      POSTGRES_MULTIPLE_DATABASES: novel_engine_test,novel_engine_analytics
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - novel-engine-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U novel_engine -d novel_engine"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Redis Cache and Session Store
  redis:
    image: redis:7-alpine
    container_name: novel-engine-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./deployment/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - novel-engine-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # MinIO S3-Compatible Object Storage
  minio:
    image: minio/minio:latest
    container_name: novel-engine-minio
    environment:
      MINIO_ROOT_USER: novel_engine
      MINIO_ROOT_PASSWORD: novel_engine_dev_password
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - novel-engine-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Zookeeper (Required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: novel-engine-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_INIT_LIMIT: 10
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - novel-engine-network
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Apache Kafka Event Streaming
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: novel-engine-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_DELETE_TOPIC_ENABLE: true
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_NUM_PARTITIONS: 3
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - novel-engine-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Kafka UI for Development (Optional)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: novel-engine-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: novel-engine
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    networks:
      - novel-engine-network
    profiles:
      - dev
    restart: unless-stopped

  # Elasticsearch (for search and analytics)
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: novel-engine-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - novel-engine-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - analytics
    restart: unless-stopped

  # Prometheus (for metrics collection)
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: novel-engine-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - novel-engine-network
    profiles:
      - monitoring
    restart: unless-stopped

  # Grafana (for metrics visualization)
  grafana:
    image: grafana/grafana:10.2.0
    container_name: novel-engine-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: novel_engine_dev_password
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - novel-engine-network
    profiles:
      - monitoring
    restart: unless-stopped

  # Jaeger (for distributed tracing)
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: novel-engine-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger collector gRPC
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    networks:
      - novel-engine-network
    profiles:
      - monitoring
    restart: unless-stopped

# Volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  novel-engine-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16